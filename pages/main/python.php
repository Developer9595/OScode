<!DOCTYPE html>
<html dir="ltr" lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Tell the browser to be responsive to screen width -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- Favicon icon -->
    <link rel="icon" type="image/png" sizes="16x16" href="../../assets/images/logo.png">
    <title>Python</title>
    <!-- Custom CSS -->
    <link href="../../assets/extra-libs/c3/c3.min.css" rel="stylesheet">
    <link href="../../assets/libs/chartist/dist/chartist.min.css" rel="stylesheet">
    <link href="../../assets/extra-libs/jvector/jquery-jvectormap-2.0.2.css" rel="stylesheet" />
    <!-- Custom CSS -->
    <link href="../../dist/css/style.css" rel="stylesheet">
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
<![endif]-->
</head>

<body>
    <!-- ============================================================== -->
    <!-- Preloader - style you can find in spinners.css -->
    <!-- ============================================================== -->
    <div class="preloader">
        <div class="lds-ripple">
            <div class="lds-pos"></div>
            <div class="lds-pos"></div>
        </div>
    </div>
    <!-- ============================================================== -->
    <!-- Main wrapper - style you can find in pages.scss -->
    <!-- ============================================================== -->
    <div id="main-wrapper" data-theme="light" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full"
        data-sidebar-position="fixed" data-header-position="fixed" data-boxed-layout="full">
        <!-- ============================================================== -->
        <!-- Topbar header - style you can find in pages.scss -->
        <!-- ============================================================== -->
        <header class="topbar" data-navbarbg="skin6">
            <nav class="navbar top-navbar navbar-expand-md">
                <div class="navbar-header" data-logobg="skin6">
                    <!-- This is for the sidebar toggle which is visible on mobile only -->
                    <a class="nav-toggler waves-effect waves-light d-block d-md-none" href="javascript:void(0)"><i
                            class="ti-menu ti-close"></i></a>
                    <!-- ============================================================== -->
                    <!-- Logo -->
                    <!-- ============================================================== -->
                    <div class="navbar-brand">
                        <!-- Logo icon -->
                        <a href="/">
                            <b class="logo-icon">
                                <!-- Dark Logo icon -->
                                <img src="../../assets/images/logo.png" width="128px" alt="LOGO" class="dark-logo" />
                                <!-- Light Logo icon -->
                                <img src="../../assets/images/logo.png" width="128px" alt="LOGO" class="light-logo" />
                            </b>
                        </a>
                    </div>
                    <!-- ============================================================== -->
                    <!-- End Logo -->
                    <!-- ============================================================== -->
                    <!-- ============================================================== -->
                    <!-- Toggle which is visible on mobile only -->
                    <!-- ============================================================== -->
                    <a class="topbartoggler d-block d-md-none waves-effect waves-light" href="javascript:void(0)"
                        data-toggle="collapse" data-target="#navbarSupportedContent"
                        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><i
                            class="ti-more"></i></a>
                </div>
                <!-- ============================================================== -->
                <!-- End Logo -->
                <!-- ============================================================== -->
                <div class="navbar-collapse collapse" id="navbarSupportedContent">
                    <!-- ============================================================== -->
                    <!-- toggle and nav items -->
                    <!-- ============================================================== -->
                    <ul class="navbar-nav float-left mr-auto ml-3 pl-1">
                        <!-- Notification -->
                        
                        <!-- End Notification -->
                        <!-- ============================================================== -->
                        <!-- create new -->
                        <!-- ============================================================== -->
                        <h3>Язык программирования Python</h3>
                        
                    </ul>
                    <!-- ============================================================== -->
                    <!-- Right side toggle and nav items -->
                    <!-- ============================================================== -->
                    
                    <ul class="navbar-nav float-right">
                        <!-- ============================================================== -->
                        <!-- Search -->
                        <!-- ============================================================== -->
                        
                        <!-- ============================================================== -->
                        <!-- User profile and search -->
                        <!-- ============================================================== -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" class="js-logout" href="javascript:void(0)" data-toggle="dropdown"
                                aria-haspopup="true" aria-expanded="false">
                                                                     
                                    <li class="header-menu__list-text">
                                    <div class="dropdown">
                                    <a class="btn btn- dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                   
                                    </a>
                                    <div class="dropdown-menu btn-username" aria-labelledby="dropdownMenuLink">
                                        <a class="dropdown-item" href="index.php">Главная страница</a>
                                        <a class="dropdown-item" id="somewhere" href="logout.php">Выход</a>
                                    </div>
                                    </div>
                                    </li>
                                </li>
                        <!-- ============================================================== -->
                    </ul>
                </div>
            </nav>
        </header>
        <!-- ============================================================== -->
        <!-- End Topbar header -->
        <!-- ============================================================== -->
        <!-- ============================================================== -->
        <!-- Left Sidebar - style you can find in sidebar.scss  -->
        <!-- ============================================================== -->
        <aside class="left-sidebar" data-sidebarbg="skin6">
            <!-- Sidebar scroll-->
            <div class="scroll-sidebar" data-sidebarbg="skin6">
                <!-- Sidebar navigation-->
                <nav class="sidebar-nav">
                    <ul id="sidebarnav">
                    
                        <li class="list-divider"></li>
                        <li class="nav-small-cap"><span class="hide-menu"></span></li>

                        <div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="ru" dir="ltr"><h2 id="mw-toc-heading">Меню</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
                        <ul>
<li class="toclevel-1 tocsection-1"><a href="#Философия"><span class="tocnumber">1</span> <span class="toctext">Философия</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Название_языка"><span class="tocnumber">2</span> <span class="toctext">Название языка</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#История"><span class="tocnumber">3</span> <span class="toctext">История</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Портируемость"><span class="tocnumber">4</span> <span class="toctext">Портируемость</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Типы_и_структуры_данных"><span class="tocnumber">5</span> <span class="toctext">Типы и структуры данных</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Синтаксис_и_семантика"><span class="tocnumber">6</span> <span class="toctext">Синтаксис и семантика</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="#Операторы"><span class="tocnumber">6.1</span> <span class="toctext">Операторы</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Выражения"><span class="tocnumber">6.2</span> <span class="toctext">Выражения</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Имена"><span class="tocnumber">6.3</span> <span class="toctext">Имена</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Строки_документации"><span class="tocnumber">6.4</span> <span class="toctext">Строки документации</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Директивы"><span class="tocnumber">6.5</span> <span class="toctext">Директивы</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="#Возможности"><span class="tocnumber">7</span> <span class="toctext">Возможности</span></a>
<ul>
<li class="toclevel-2 tocsection-13"><a href="#Объектно-ориентированное_программирование"><span class="tocnumber">7.1</span> <span class="toctext">Объектно-ориентированное программирование</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#Обобщенное_программирование"><span class="tocnumber">7.2</span> <span class="toctext">Обобщенное программирование</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Функциональное_программирование"><span class="tocnumber">7.3</span> <span class="toctext">Функциональное программирование</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#Модули_и_пакеты"><span class="tocnumber">7.4</span> <span class="toctext">Модули и пакеты</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="#Интроспекция"><span class="tocnumber">7.5</span> <span class="toctext">Интроспекция</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#Обработка_исключений"><span class="tocnumber">7.6</span> <span class="toctext">Обработка исключений</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#Итераторы"><span class="tocnumber">7.7</span> <span class="toctext">Итераторы</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#Генераторы"><span class="tocnumber">7.8</span> <span class="toctext">Генераторы</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#Управление_контекстом_выполнения"><span class="tocnumber">7.9</span> <span class="toctext">Управление контекстом выполнения</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#Декораторы"><span class="tocnumber">7.10</span> <span class="toctext">Декораторы</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="#Регулярные_выражения"><span class="tocnumber">7.11</span> <span class="toctext">Регулярные выражения</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#Другие_возможности"><span class="tocnumber">7.12</span> <span class="toctext">Другие возможности</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-25"><a href="#Библиотеки"><span class="tocnumber">8</span> <span class="toctext">Библиотеки</span></a>
<ul>
<li class="toclevel-2 tocsection-26"><a href="#Стандартная_библиотека"><span class="tocnumber">8.1</span> <span class="toctext">Стандартная библиотека</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="#Модули_расширения_и_программные_интерфейсы"><span class="tocnumber">8.2</span> <span class="toctext">Модули расширения и программные интерфейсы</span></a></li>
<li class="toclevel-2 tocsection-28"><a href="#Графические_библиотеки"><span class="tocnumber">8.3</span> <span class="toctext">Графические библиотеки</span></a></li>
<li class="toclevel-2 tocsection-29"><a href="#Контроль_типов_и_перегрузка_функций"><span class="tocnumber">8.4</span> <span class="toctext">Контроль типов и перегрузка функций</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-30"><a href="#Примеры_программ"><span class="tocnumber">9</span> <span class="toctext">Примеры программ</span></a></li>
<li class="toclevel-1 tocsection-31"><a href="#Профилирование_и_оптимизация_кода"><span class="tocnumber">10</span> <span class="toctext">Профилирование и оптимизация кода</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="#Сравнение_с_другими_языками"><span class="tocnumber">11</span> <span class="toctext">Сравнение с другими языками</span></a></li>
<li class="toclevel-1 tocsection-33"><a href="#Недостатки"><span class="tocnumber">12</span> <span class="toctext">Недостатки</span></a>
<ul>
<li class="toclevel-2 tocsection-34"><a href="#Синтаксис_и_семантика_2"><span class="tocnumber">12.1</span> <span class="toctext">Синтаксис и семантика</span></a></li>
<li class="toclevel-2 tocsection-35"><a href="#Низкое_быстродействие"><span class="tocnumber">12.2</span> <span class="toctext">Низкое быстродействие</span></a></li>
<li class="toclevel-2 tocsection-36"><a href="#Невозможность_модификации_встроенных_классов"><span class="tocnumber">12.3</span> <span class="toctext">Невозможность модификации встроенных классов</span></a></li>
<li class="toclevel-2 tocsection-37"><a href="#Глобальная_блокировка_интерпретатора_(GIL)"><span class="tocnumber">12.4</span> <span class="toctext">Глобальная блокировка интерпретатора (GIL)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-38"><a href="#Реализации"><span class="tocnumber">13</span> <span class="toctext">Реализации</span></a></li>
<li class="toclevel-1 tocsection-39"><a href="#Дальнейшая_разработка"><span class="tocnumber">14</span> <span class="toctext">Дальнейшая разработка</span></a>
<ul>
<li class="toclevel-2 tocsection-40"><a href="#График_и_совместимость"><span class="tocnumber">14.1</span> <span class="toctext">График и совместимость</span></a></li>
<li class="toclevel-2 tocsection-41"><a href="#Возможности_2"><span class="tocnumber">14.2</span> <span class="toctext">Возможности</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-42"><a href="#Специализированные_подмножества/расширения_Python"><span class="tocnumber">15</span> <span class="toctext">Специализированные подмножества/расширения Python</span></a></li>
<li class="toclevel-1 tocsection-43"><a href="#Инструменты_поддержки_программирования"><span class="tocnumber">16</span> <span class="toctext">Инструменты поддержки программирования</span></a>
<ul>
<li class="toclevel-2 tocsection-44"><a href="#Интерактивный_режим"><span class="tocnumber">16.1</span> <span class="toctext">Интерактивный режим</span></a></li>
<li class="toclevel-2 tocsection-45"><a href="#IDE"><span class="tocnumber">16.2</span> <span class="toctext">IDE</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-46"><a href="#Применение"><span class="tocnumber">17</span> <span class="toctext">Применение</span></a></li>
<li class="toclevel-1 tocsection-47"><a href="#См._также"><span class="tocnumber">18</span> <span class="toctext">См. также</span></a></li>
<li class="toclevel-1 tocsection-48"><a href="#Примечания"><span class="tocnumber">19</span> <span class="toctext">Примечания</span></a>
<ul>
<li class="toclevel-2 tocsection-49"><a href="#Комментарии"><span class="tocnumber">19.1</span> <span class="toctext">Комментарии</span></a></li>
<li class="toclevel-2 tocsection-50"><a href="#Источники"><span class="tocnumber">19.2</span> <span class="toctext">Источники</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-51"><a href="#Литература"><span class="tocnumber">20</span> <span class="toctext">Литература</span></a></li>
<li class="toclevel-1 tocsection-52"><a href="#Ссылки"><span class="tocnumber">21</span> <span class="toctext">Ссылки</span></a></li>
</ul>
</div>
                        
                            <ul aria-expanded="false" class="collapse first-level base-level-line">
                                
                                
                                
                                    <ul aria-expanded="false" class="collapse second-level base-level-line">
                                        
                                    </ul>
                                </li>
                                
                            </ul>
                        </li>
                        <li class="list-divider"></li>
                                    <script>
                                        (function(){
                                            var linkk = document.getElementById('somewhere');
                                            linkk.onclick = function goSomeWhere(){
                                                var val = confirm("Вы уверены что хотите выйти?");
                                                if(val == true){
                                                    window.location.href = "logout.php";
                                                }
                                                else{
                                                    return false;
                                                }
                                            }
                                            })();
                                    </script>
                    </ul>
                </nav>
                <!-- End Sidebar navigation -->
            </div>
            <!-- End Sidebar scroll-->
        </aside>
        <!-- ============================================================== -->
        <!-- End Left Sidebar - style you can find in sidebar.scss  -->
        <!-- ============================================================== -->
        <!-- ============================================================== -->
        <!-- Page wrapper  -->
        <!-- ============================================================== -->
        <div class="page-wrapper">
            <!-- ============================================================== -->
            <!-- Bread crumb and right sidebar toggle -->
            <!-- ============================================================== -->
            
            <!-- ============================================================== -->
            <!-- End Bread crumb and right sidebar toggle -->
            <!-- ============================================================== -->
            <!-- ============================================================== -->
            <!-- Container fluid  -->
            <!-- ============================================================== -->
            <div class="container-fluid">
                <!-- *************************************************************** -->
                <!-- Start First Cards -->
                <!-- *************************************************************** -->
                <div id="bodyContent" class="mw-body-content">
		
<table class="infobox" style="" data-name="Язык программирования"><tbody><tr><th colspan="2" class="infobox-above" style="background:#cfe3ff;">Python</th></tr><tr><td colspan="2" class="infobox-image" style=""> <span class="wikidata-claim" data-wikidata-property-id="P154" data-wikidata-claim-id="Q28865$598229ad-4951-db2b-ff76-1d9820b9dc87"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Python-logo-notext.svg" class="image"><img alt="Python-logo-notext.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/80px-Python-logo-notext.svg.png" decoding="async" width="80" height="80" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/120px-Python-logo-notext.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/160px-Python-logo-notext.svg.png 2x" data-file-width="110" data-file-height="110" /></a></span></span> </td></tr>
<tr>
<th class="plainlist">Класс языка</th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P31" data-wikidata-claim-id="q28865$558BEE51-7F4A-457A-AC7C-1904AD5ABCEC"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Объектно-ориентированный язык программирования">объектно-ориентированный язык программирования</a></span></span></td>
</tr>
<tr>
<th class="plainlist">Появился в</th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P571" data-wikidata-claim-id="Q28865$121d200b-4363-1c27-8ae5-2b9e7f988cc1"><span class="wikidata-snak wikidata-main-snak"><span class="nowrap"><a href="/wiki/20_%D1%84%D0%B5%D0%B2%D1%80%D0%B0%D0%BB%D1%8F" title="20 февраля">20 февраля</a> <a href="/wiki/1991_%D0%B3%D0%BE%D0%B4" title="1991 год">1991</a></span></span><sup id="cite_ref-_31adfebf6a01c187_4-0" class="reference"><a href="#cite_note-_31adfebf6a01c187-4">&#91;4&#93;</a></sup></span></td>
</tr>
<tr>
<th class="plainlist">Автор</th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P287" data-wikidata-claim-id="Q28865$412397AB-37B4-4B15-98B2-72F32E75C3EF"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%92%D0%B0%D0%BD_%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC,_%D0%93%D0%B2%D0%B8%D0%B4%D0%BE" title="Ван Россум, Гвидо">Гвидо ван Россум</a></span><sup id="cite_ref-_557c9342431fdc2d_1-3" class="reference"><a href="#cite_note-_557c9342431fdc2d-1">&#91;1&#93;</a></sup></span></td>
</tr>
<tr>
<th class="plainlist">Разработчик</th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P178" data-wikidata-claim-id="Q28865$cebd1e94-42be-e77a-ec46-29468ff14442"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Python_Software_Foundation" title="Python Software Foundation">Python Software Foundation</a></span></span>&#32;и&#32;<span class="wikidata-claim" data-wikidata-property-id="P178" data-wikidata-claim-id="q28865$BC5954EF-52F0-4346-83D7-5FE75EAE7904"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%92%D0%B0%D0%BD_%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC,_%D0%93%D0%B2%D0%B8%D0%B4%D0%BE" title="Ван Россум, Гвидо">Гвидо ван Россум</a></span><sup id="cite_ref-_557c9342431fdc2d_1-2" class="reference"><a href="#cite_note-_557c9342431fdc2d-1">&#91;1&#93;</a></sup></span></td>
</tr>
<tr>
<th class="plainlist"><a href="/wiki/%D0%A0%D0%B0%D1%81%D1%88%D0%B8%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B8%D0%BC%D0%B5%D0%BD%D0%B8_%D1%84%D0%B0%D0%B9%D0%BB%D0%B0" title="Расширение имени файла">Расширение</a> файлов</th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P1195" data-wikidata-claim-id="Q28865$FE571A55-CC2C-49D6-9CAB-33BAA0176692"><span class="wikidata-snak wikidata-main-snak"><code>.py</code></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P1195" data-wikidata-claim-id="Q28865$42AE603A-AD6A-486F-BFF9-72B4699DD6DC"><span class="wikidata-snak wikidata-main-snak"><code>.pyc</code></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P1195" data-wikidata-claim-id="Q28865$03550F85-6818-4990-A0CF-5C37B41E6D2D"><span class="wikidata-snak wikidata-main-snak"><code>.pyd</code></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P1195" data-wikidata-claim-id="Q28865$5B7E9AE8-B0CE-4C0D-8ED3-06BB674BD6E8"><span class="wikidata-snak wikidata-main-snak"><code>.pyo</code></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P1195" data-wikidata-claim-id="Q28865$1ca110ba-4521-f3c0-0a12-a95563e1d556"><span class="wikidata-snak wikidata-main-snak"><code>.pyw</code></span></span> или <span class="wikidata-claim" data-wikidata-property-id="P1195" data-wikidata-claim-id="Q28865$9ab7c522-47c5-b801-7446-ff33d8e6ceff"><span class="wikidata-snak wikidata-main-snak"><code>.pyz</code></span></span></td>
</tr>
<tr>
<th class="plainlist"><a href="/wiki/%D0%A1%D1%82%D0%B0%D0%B4%D0%B8%D0%B8_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F" title="Стадии разработки программного обеспечения">Выпуск</a></th>
<td class="plainlist">
<span class="no-wikidata" data-wikidata-property-id="P348"><ul><li><span class="wikidata-claim" data-wikidata-property-id="P348" data-wikidata-claim-id="Q28865$b6b943a4-49f0-044b-88d9-63f3faa8d6d1"><span class="wikidata-snak wikidata-main-snak">3.8.3</span> (<span class="wikidata-snak" data-wikidata-hash="657c4fe281c3148165f526abc804bc76a4cbbcfe"><span class="nowrap"><a href="/wiki/13_%D0%BC%D0%B0%D1%8F" title="13 мая">13 мая</a> <a href="/wiki/2020_%D0%B3%D0%BE%D0%B4" title="2020 год">2020</a></span></span>)<sup id="cite_ref-_481987ef28864b52_2-0" class="reference"><a href="#cite_note-_481987ef28864b52-2">&#91;2&#93;</a></sup><sup id="cite_ref-_eff52c1ec3d58952_3-0" class="reference"><a href="#cite_note-_eff52c1ec3d58952-3">&#91;3&#93;</a></sup></span></li></ul></span></td>
</tr>
<tr>
<th class="plainlist">Испытал влияние</th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$1F67D9DA-88F0-497E-8BF7-A542DB61B03E"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D0%BB_68" title="Алгол 68">Алгол 68</a></span><sup id="cite_ref-_d6c5b40bdd71a311_5-0" class="reference"><a href="#cite_note-_d6c5b40bdd71a311-5">&#91;5&#93;</a></sup></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$6922c624-4248-27dd-b27c-a0893c011278"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/ABC_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="ABC (язык программирования)">ABC</a></span><sup id="cite_ref-_2ceff96f3f896d72_6-0" class="reference"><a href="#cite_note-_2ceff96f3f896d72-6">&#91;6&#93;</a></sup></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$ec892c63-4666-8be7-f777-94bb1a759937"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D0%B0-3" title="Модула-3">Модула-3</a></span><sup id="cite_ref-_3e91e1203bbb2abc_7-0" class="reference"><a href="#cite_note-_3e91e1203bbb2abc-7">&#91;7&#93;</a></sup></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$aa5b6121-40fa-1112-1a2d-0b0acc3ad416"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Си (язык программирования)">Си</a></span><sup id="cite_ref-_5f2e993472405c89_8-0" class="reference"><a href="#cite_note-_5f2e993472405c89-8">&#91;8&#93;</a></sup></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$3d23774b-4d5e-1f16-cdb8-2425ca2e3175"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/C%2B%2B" title="C++">C++</a></span><sup id="cite_ref-_3e91e1203bbb2abc_7-1" class="reference"><a href="#cite_note-_3e91e1203bbb2abc-7">&#91;7&#93;</a></sup></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$4ff21039-4b4c-0a2f-d13c-cc1e887fb9d6"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Perl" title="Perl">Perl</a></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$103eda01-4352-cf14-1718-2f5b6e54fdd6"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Java" title="Java">Java</a></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$9a15c72d-4a96-df14-a843-522e494b4f45"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%9B%D0%B8%D1%81%D0%BF" title="Лисп">Лисп</a></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$70d87aa9-4e5f-7970-d7ad-5432c6ffb15e"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Haskell" title="Haskell">Haskell</a></span><sup id="cite_ref-_580ba210b8174042_9-0" class="reference"><a href="#cite_note-_580ba210b8174042-9">&#91;9&#93;</a></sup></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$e06d3aeb-d6ae-42b7-9822-e9e4eae9ba8c"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/APL_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="APL (язык программирования)">APL</a></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$9ad4d11c-7c11-486f-bcd0-7b8fd3892e0e"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%9A%D0%BB%D1%83" title="Клу">Клу</a></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$61d1d66d-25f1-4a0e-8d94-9e4234d95cfa"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Dylan_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Dylan (язык программирования)">Dylan</a></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$fad91012-df02-47f5-8106-74288a14c7c7"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Icon_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Icon (язык программирования)">Icon</a></span></span>,&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$e64b55fa-c4c5-4ef2-8dc1-6b31ceab3535"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Standard_ML" title="Standard ML">SML</a></span></span>&#32;и&#32;<span class="wikidata-claim" data-wikidata-property-id="P737" data-wikidata-claim-id="Q28865$4fb4877e-420f-bbae-045b-1c4b4c6bd8e9"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Nim" title="Nim">Nim</a></span></span></td>
</tr>
<tr>
<th class="plainlist"><a href="/wiki/%D0%9B%D0%B8%D1%86%D0%B5%D0%BD%D0%B7%D0%B8%D1%8F_%D0%BD%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5" title="Лицензия на программное обеспечение">Лицензия</a></th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P275" data-wikidata-claim-id="Q28865$a18d1e5d-43b3-3255-efb1-b9ebe4919702"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/Python_Software_Foundation_License" title="Python Software Foundation License">Python Software Foundation License</a></span><sup id="cite_ref-_557c9342431fdc2d_1-4" class="reference"><a href="#cite_note-_557c9342431fdc2d-1">&#91;1&#93;</a></sup></span></td>
</tr>
<tr>
<th class="plainlist">Сайт</th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P856" data-wikidata-claim-id="Q28865$D8D54AB1-59D2-4BFB-95A2-9A9CC6001C45"><span class="wikidata-snak wikidata-main-snak"><a rel="nofollow" class="external text" href="https://www.python.org/">python.org</a>&#8203;&#160;<span class="ref-info" style="cursor:help;" title="на английском языке">(англ.)</span></span></span></td>
</tr>
<tr>
<th class="plainlist"><a href="/wiki/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0" title="Операционная система">ОС</a></th>
<td class="plainlist">
<span class="wikidata-claim" data-wikidata-property-id="P306" data-wikidata-claim-id="Q28865$d1418636-4772-cbad-931a-b42d43627be9"><span class="wikidata-snak wikidata-main-snak"><a href="/wiki/%D0%9A%D1%80%D0%BE%D1%81%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D1%84%D0%BE%D1%80%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C" title="Кроссплатформенность">кроссплатформенность</a></span><sup id="cite_ref-_82f3fb81aba07547_10-0" class="reference"><a href="#cite_note-_82f3fb81aba07547-10">&#91;10&#93;</a></sup></span></td>
</tr><tr><td colspan="2" class="infobox-below" style="background:#dcebff;;"><span class="wikidata-claim" data-wikidata-property-id="P373" data-wikidata-claim-id="q28865$35264521-12CB-4D30-B04F-70B14BE6F900"><span class="wikidata-snak wikidata-main-snak"><a href="https://commons.wikimedia.org/wiki/Category:Python_(programming_language)" title="commons:Category:Python (programming language)"><img alt="Commons-logo.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Commons-logo.svg/15px-Commons-logo.svg.png" decoding="async" width="15" height="20" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Commons-logo.svg/23px-Commons-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Commons-logo.svg/30px-Commons-logo.svg.png 2x" data-file-width="1024" data-file-height="1376" /></a>&#160;<a href="https://commons.wikimedia.org/wiki/Category:Python_(programming_language)" class="extiw" title="commons:Category:Python (programming language)">Медиафайлы на Викискладе</a></span></span></td></tr>
</tbody></table>
<p><b>Python</b><sup id="cite_ref-11" class="reference"><a href="#cite_note-11">&#91;комм 1&#93;</a></sup> (<small><a href="/wiki/%D0%9C%D0%A4%D0%90" class="mw-redirect" title="МФА">МФА</a>:</small> <span class="IPA"><a href="/wiki/%D0%9C%D0%B5%D0%B6%D0%B4%D1%83%D0%BD%D0%B0%D1%80%D0%BE%D0%B4%D0%BD%D1%8B%D0%B9_%D1%84%D0%BE%D0%BD%D0%B5%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BB%D1%84%D0%B0%D0%B2%D0%B8%D1%82" title="Международный фонетический алфавит">[ˈpʌɪθ(ə)n]</a></span>; в русском языке распространено название <i>пито́н</i><sup id="cite_ref-12" class="reference"><a href="#cite_note-12">&#91;11&#93;</a></sup>)&#160;— <a href="/wiki/%D0%92%D1%8B%D1%81%D0%BE%D0%BA%D0%BE%D1%83%D1%80%D0%BE%D0%B2%D0%BD%D0%B5%D0%B2%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Высокоуровневый язык программирования">высокоуровневый язык программирования</a> общего назначения, ориентированный на повышение производительности разработчика и читаемости кода. <a href="/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%81_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Синтаксис (программирование)">Синтаксис</a> ядра Python минималистичен. В то же время <a href="/wiki/%D0%A1%D1%82%D0%B0%D0%BD%D0%B4%D0%B0%D1%80%D1%82%D0%BD%D0%B0%D1%8F_%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0_Python" title="Стандартная библиотека Python">стандартная библиотека</a> включает большой объём полезных функций.
</p><p>Python поддерживает <a href="/wiki/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Структурное программирование">структурное</a>, <a href="/wiki/%D0%9E%D0%B1%D0%BE%D0%B1%D1%89%D1%91%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Обобщённое программирование">обобщенное</a>, <a href="/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Объектно-ориентированное программирование">объектно-ориентированное</a>, <a href="/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Функциональное программирование">функциональное</a> и <a href="/wiki/%D0%90%D1%81%D0%BF%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Аспектно-ориентированное программирование">аспектно-ориентированное программирование</a>. Основные архитектурные черты&#160;— <a href="/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F" title="Динамическая типизация">динамическая типизация</a>, <a href="/wiki/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0_%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" class="mw-redirect" title="Сборка мусора (программирование)">автоматическое управление памятью</a>, полная <a href="/wiki/%D0%98%D0%BD%D1%82%D1%80%D0%BE%D1%81%D0%BF%D0%B5%D0%BA%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Интроспекция (программирование)">интроспекция</a>, механизм <a href="/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D0%B8%D1%81%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B9" title="Обработка исключений">обработки исключений</a>, поддержка <a href="/wiki/%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C" title="Многопоточность">многопоточных вычислений</a>, высокоуровневые <a href="/wiki/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85" title="Структура данных">структуры данных</a>. Поддерживается разбиение программ на <a href="/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" class="mw-redirect" title="Модуль (программирование)">модули</a>, которые, в свою очередь, могут объединяться в пакеты.
</p><p>Эталонной реализацией Python является интерпретатор <a href="/wiki/CPython" title="CPython">CPython</a>, поддерживающий большинство активно используемых платформ<sup id="cite_ref-13" class="reference"><a href="#cite_note-13">&#91;12&#93;</a></sup>. Он распространяется под <a href="/wiki/%D0%A1%D0%B2%D0%BE%D0%B1%D0%BE%D0%B4%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5" title="Свободное программное обеспечение">свободной лицензией</a> Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая <a href="/wiki/%D0%9F%D1%80%D0%BE%D0%BF%D1%80%D0%B8%D0%B5%D1%82%D0%B0%D1%80%D0%BD%D0%BE%D0%B5_%D0%9F%D0%9E" class="mw-redirect" title="Проприетарное ПО">проприетарные</a><sup id="cite_ref-14" class="reference"><a href="#cite_note-14">&#91;13&#93;</a></sup>. Есть <a href="/wiki/Jython" title="Jython">реализация интерпретатора для JVM</a> с возможностью <a href="/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80" title="Компилятор">компиляции</a>, <a href="/wiki/IronPython" title="IronPython">CLR</a>, <a href="/wiki/LLVM" title="LLVM">LLVM</a>, другие независимые реализации. Проект <a href="/wiki/PyPy" title="PyPy">PyPy</a> использует <a href="/wiki/JIT-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F" title="JIT-компиляция">JIT-компиляцию</a>, которая значительно увеличивает скорость выполнения Python-программ.
</p><p>Python&#160;— активно развивающийся <a href="/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Язык программирования">язык программирования</a>, новые версии с добавлением/изменением языковых свойств выходят примерно раз в два с половиной года. Язык не подвергался официальной стандартизации, роль стандарта де-факто выполняет <a href="/wiki/CPython" title="CPython">CPython</a>, разрабатываемый под контролем автора языка. В настоящий момент Python занимает третье место в <a href="/wiki/%D0%98%D0%BD%D0%B4%D0%B5%D0%BA%D1%81_TIOBE" title="Индекс TIOBE">рейтинге TIOBE</a> с показателем 10,2&#160;%<sup id="cite_ref-15" class="reference"><a href="#cite_note-15">&#91;14&#93;</a></sup>. Аналитики отмечают, что это самый высокий балл Python за все время его присутствия в рейтинге.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="ru" dir="ltr"><h2 id="mw-toc-heading">Содержание</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>

</div>

<h2><span id=".D0.A4.D0.B8.D0.BB.D0.BE.D1.81.D0.BE.D1.84.D0.B8.D1.8F"></span><span class="mw-headline" id="Философия">Философия</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=1" class="mw-editsection-visualeditor" title="Редактировать раздел «Философия»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=1" title="Редактировать раздел «Философия»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Разработчики языка Python придерживаются определённой философии программирования, называемой «The Zen of Python» («<a href="/wiki/%D0%94%D0%B7%D0%B5%D0%BD" class="mw-redirect" title="Дзен">Дзен</a> Пито́на», или «Дзен Па́йтона»)<sup id="cite_ref-16" class="reference"><a href="#cite_note-16">&#91;15&#93;</a></sup>. Её текст выдаётся <a href="/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B0%D1%82%D0%BE%D1%80" title="Интерпретатор">интерпретатором</a> Python по команде <code>import this</code> (работает один раз за сессию). Автором этой философии считается <a href="/wiki/%D0%A2%D0%B8%D0%BC_%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D1%81" class="mw-redirect" title="Тим Петерс">Тим Петерс</a> (Tim Peters).
</p><p>Текст философии:
<style data-mw-deduplicate="TemplateStyles:r106630606">.mw-parser-output .ts-Начало_цитаты-quote{padding:0.25em 1em;border:thin solid #eaecf0}.mw-parser-output .ts-Начало_цитаты-source{margin:1em 0 0 5%}.mw-parser-output .ts-Начало_цитаты-quote .ts-oq{margin:0 -1em -0.25em}.mw-parser-output .ts-Начало_цитаты-quote .ts-oq .NavFrame{padding:0}.mw-parser-output .ts-Начало_цитаты-quote .ts-oq .NavHead,.mw-parser-output .ts-Начало_цитаты-quote .ts-oq .NavContent{padding-left:1.052632em;padding-right:1.052632em}</style>
</p>
<blockquote class="ts-Начало_цитаты-quote">
<p class="mw-empty-elt">
</p>
<ul><li>Красивое лучше, чем уродливое.</li>
<li>Явное лучше, чем неявное.</li>
<li>Простое лучше, чем сложное.</li>
<li>Сложное лучше, чем запутанное.</li>
<li>Плоское лучше, чем вложенное.</li>
<li>Разреженное лучше, чем плотное.</li>
<li>Читаемость имеет значение.</li>
<li>Особые случаи не настолько особые, чтобы нарушать правила.</li>
<li>При этом практичность важнее безупречности.</li>
<li>Ошибки никогда не должны замалчиваться.</li>
<li>Если не замалчиваются явно.</li>
<li>Встретив двусмысленность, отбрось искушение угадать.</li>
<li>Должен существовать один&#160;— и, желательно, <i>только</i> один&#160;— очевидный способ сделать это.</li>
<li>Хотя он поначалу может быть и не очевиден, если вы не голландец<sup id="cite_ref-17" class="reference"><a href="#cite_note-17">&#91;комм 2&#93;</a></sup>.</li>
<li>Сейчас лучше, чем никогда.</li>
<li>Хотя никогда зачастую лучше, чем <i>прямо</i> сейчас.</li>
<li>Если реализацию сложно объяснить&#160;— идея плоха.</li>
<li>Если реализацию легко объяснить&#160;— идея, <i>возможно</i>, хороша.</li>
<li>Пространства имён&#160;— отличная вещь! Давайте будем делать их больше!</li></ul>
<style data-mw-deduplicate="TemplateStyles:r104610287">.mw-parser-output .ts-oq{overflow:auto;font-style:normal}.mw-parser-output .ts-oq .ref-info{font-size:100%}.mw-parser-output .ts-oq .NavToggle{float:none;position:static;right:auto;text-align:left;margin-left:1em}</style><div class="ts-oq"><div class="NavFrame collapsibleBox collapsed" style="border:none;"><div class="NavHead collapsibleBox-title collapsibleBox-title-leftTitle collapsibleBox-title-rightHideLink" style="text-align:left;background-color:#eaecf0; color:#72777d;">Оригинальный текст&#160;<span class="ref-info" style="cursor:help;" title="на английском языке">(англ.)</span></div><div class="NavContent" style="">
<div lang="en" style="font-style:italic;">
<ul><li>Beautiful is better than ugly.</li>
<li>Explicit is better than implicit.</li>
<li>Simple is better than complex.</li>
<li>Complex is better than complicated.</li>
<li>Flat is better than nested.</li>
<li>Sparse is better than dense.</li>
<li>Readability counts.</li>
<li>Special cases aren’t special enough to break the rules.</li>
<li>Although practicality beats purity.</li>
<li>Errors should never pass silently.</li>
<li>Unless explicitly silenced.</li>
<li>In the face of ambiguity, refuse the temptation to guess.</li>
<li>There should be one&#160;— and preferably only one&#160;— obvious way to do it.</li>
<li>Although that way may not be obvious at first unless you’re Dutch.</li>
<li>Now is better than never.</li>
<li>Although never is often better than 'right now'.</li>
<li>If the implementation is hard to explain, it’s a bad idea.</li>
<li>If the implementation is easy to explain, it may be a good idea.</li>
<li>Namespaces are one honking great idea&#160;— let’s do more of those!</li></ul>
</div>
</div></div></div><style data-mw-deduplicate="TemplateStyles:r104610272">.mw-parser-output .ts-Конец_цитаты-source{margin:0.357143em 2em 0 0;text-align:right}</style></blockquote>
<h2><span id=".D0.9D.D0.B0.D0.B7.D0.B2.D0.B0.D0.BD.D0.B8.D0.B5_.D1.8F.D0.B7.D1.8B.D0.BA.D0.B0"></span><span class="mw-headline" id="Название_языка">Название языка</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=2" class="mw-editsection-visualeditor" title="Редактировать раздел «Название языка»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=2" title="Редактировать раздел «Название языка»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="thumb tleft"><div class="thumbinner" style="width:34px;"><a href="/w/index.php?title=%D0%A4%D0%B0%D0%B9%D0%BB:Python-icon.png&amp;filetimestamp=20051005085441&amp;" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/ru/8/89/Python-icon.png" decoding="async" width="32" height="32" class="thumbimage" data-file-width="32" data-file-height="32" /></a>  <div class="thumbcaption"><div class="magnify"><a href="/w/index.php?title=%D0%A4%D0%B0%D0%B9%D0%BB:Python-icon.png&amp;filetimestamp=20051005085441" class="internal" title="Увеличить"></a></div>.py</div></div></div>
<p>Название языка произошло вовсе не от названия семейства пресмыкающихся. Автор назвал язык в честь популярного британского комедийного телешоу <a href="/wiki/1970-%D0%B5" class="mw-redirect" title="1970-е">1970-х</a> «<a href="/wiki/%D0%9B%D0%B5%D1%82%D0%B0%D1%8E%D1%89%D0%B8%D0%B9_%D1%86%D0%B8%D1%80%D0%BA_%D0%9C%D0%BE%D0%BD%D1%82%D0%B8_%D0%9F%D0%B0%D0%B9%D1%82%D0%BE%D0%BD%D0%B0" title="Летающий цирк Монти Пайтона">Летающий цирк Монти Пайтона</a>». Впрочем, всё равно название языка чаще связывают именно со змеёй, нежели с передачей&#160;— <a href="/wiki/%D0%9F%D0%B8%D0%BA%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0" title="Пиктограмма">пиктограммы</a> файлов в <a href="/wiki/KDE" title="KDE">KDE</a> или в <a href="/wiki/Microsoft_Windows" class="mw-redirect" title="Microsoft Windows">Microsoft Windows</a> и даже эмблема на сайте python.org (до выхода версии 2.5) изображают змеиные головы. Важная цель разработчиков Python&#160;— создавать его забавным для использования. Это отражено в его названии, которое пришло из <a href="/wiki/%D0%9C%D0%BE%D0%BD%D1%82%D0%B8_%D0%9F%D0%B0%D0%B9%D1%82%D0%BE%D0%BD" title="Монти Пайтон">Монти Пайтона</a><sup id="cite_ref-18" class="reference"><a href="#cite_note-18">&#91;16&#93;</a></sup>. Также это отражено в иногда игривом подходе к обучающим программам и справочным материалам, таким как примеры использования, которые используют понятия ветчины (spam<sup id="cite_ref-19" class="reference"><a href="#cite_note-19">&#91;комм 3&#93;</a></sup>) и яиц<sup id="cite_ref-20" class="reference"><a href="#cite_note-20">&#91;комм 4&#93;</a></sup> вместо стандартных foo и bar.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21">&#91;17&#93;</a></sup><sup id="cite_ref-22" class="reference"><a href="#cite_note-22">&#91;18&#93;</a></sup>
</p>
<h2><span id=".D0.98.D1.81.D1.82.D0.BE.D1.80.D0.B8.D1.8F"></span><span class="mw-headline" id="История">История</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=3" class="mw-editsection-visualeditor" title="Редактировать раздел «История»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=3" title="Редактировать раздел «История»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="hatnote">Основная статья: <b><a href="/wiki/%D0%98%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F_Python" title="История языка программирования Python">История языка программирования Python</a></b></div>
<div class="thumb tright"><div class="thumbinner" style="width:222px;"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Guido_van_Rossum_OSCON_2006.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Guido_van_Rossum_OSCON_2006.jpg/220px-Guido_van_Rossum_OSCON_2006.jpg" decoding="async" width="220" height="330" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Guido_van_Rossum_OSCON_2006.jpg/330px-Guido_van_Rossum_OSCON_2006.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/66/Guido_van_Rossum_OSCON_2006.jpg/440px-Guido_van_Rossum_OSCON_2006.jpg 2x" data-file-width="2336" data-file-height="3504" /></a>  <div class="thumbcaption"><div class="magnify"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Guido_van_Rossum_OSCON_2006.jpg" class="internal" title="Увеличить"></a></div><a href="/wiki/%D0%92%D0%B0%D0%BD_%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC,_%D0%93%D0%B2%D0%B8%D0%B4%D0%BE" title="Ван Россум, Гвидо">Гвидо Ван Россум</a></div></div></div>
<p>Разработка языка Python была начата в конце <a href="/wiki/1980-%D0%B5" class="mw-redirect" title="1980-е">1980-х годов</a><sup id="cite_ref-23" class="reference"><a href="#cite_note-23">&#91;19&#93;</a></sup> сотрудником голландского института CWI <a href="/wiki/%D0%93%D0%B2%D0%B8%D0%B4%D0%BE_%D0%B2%D0%B0%D0%BD_%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC" class="mw-redirect" title="Гвидо ван Россум">Гвидо ван Россумом</a>. Для распределённой ОС <a href="/wiki/Amoeba_(%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0)" title="Amoeba (операционная система)">Amoeba</a> требовался расширяемый <a href="/wiki/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%BD%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Сценарный язык">скриптовый язык</a>, и Гвидо начал писать Python на досуге, позаимствовав некоторые наработки для языка <a href="/wiki/ABC_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="ABC (язык программирования)">ABC</a> (Гвидо участвовал в разработке этого языка, ориентированного на обучение программированию). В феврале <a href="/wiki/1991_%D0%B3%D0%BE%D0%B4" title="1991 год">1991 года</a> Гвидо опубликовал исходный текст в <a href="/wiki/%D0%93%D1%80%D1%83%D0%BF%D0%BF%D0%B0_%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B5%D0%B9" title="Группа новостей">группе новостей</a> alt.sources<sup id="cite_ref-24" class="reference"><a href="#cite_note-24">&#91;20&#93;</a></sup>. С самого начала Python проектировался как <a href="/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Объектно-ориентированный язык программирования">объектно-ориентированный язык</a>.
</p><p>Наличие дружелюбного, отзывчивого сообщества пользователей считается, наряду с дизайнерской интуицией Гвидо, одним из факторов успеха Python. Развитие языка происходит согласно чётко регламентированному процессу создания, обсуждения, отбора и реализации документов PEP (<a href="/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Английский язык">англ.</a>&#160;<span lang="en" style="font-style:italic;">Python Enhancement Proposal</span>)&#160;— предложений по развитию Python<sup id="cite_ref-25" class="reference"><a href="#cite_note-25">&#91;21&#93;</a></sup>.
</p><p><a href="/wiki/3_%D0%B4%D0%B5%D0%BA%D0%B0%D0%B1%D1%80%D1%8F" title="3 декабря">3 декабря</a> <a href="/wiki/2008_%D0%B3%D0%BE%D0%B4" title="2008 год">2008 года</a><sup id="cite_ref-26" class="reference"><a href="#cite_note-26">&#91;22&#93;</a></sup>, после длительного тестирования, вышла первая версия Python 3000 (или Python 3.0, также используется <a href="/wiki/%D0%90%D0%B1%D0%B1%D1%80%D0%B5%D0%B2%D0%B8%D0%B0%D1%82%D1%83%D1%80%D0%B0" title="Аббревиатура">сокращение</a> Py3k). В Python 3000 устранены многие недостатки архитектуры с максимально возможным (но не полным) сохранением совместимости со старыми версиями Python. На сегодня поддерживается одна ветка развития (Python 3.x), поддержка ветки Python 2.x закончилась в апреле 2020 года.
</p>
<h2><span id=".D0.9F.D0.BE.D1.80.D1.82.D0.B8.D1.80.D1.83.D0.B5.D0.BC.D0.BE.D1.81.D1.82.D1.8C"></span><span class="mw-headline" id="Портируемость">Портируемость</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=4" class="mw-editsection-visualeditor" title="Редактировать раздел «Портируемость»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=4" title="Редактировать раздел «Портируемость»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Python <a href="/wiki/%D0%9F%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F" title="Портирование программного обеспечения">портирован</a> и работает почти на всех известных платформах&#160;— от <a href="/wiki/%D0%9A%D0%B0%D1%80%D0%BC%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D0%BF%D0%B5%D1%80%D1%81%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%BC%D0%BF%D1%8C%D1%8E%D1%82%D0%B5%D1%80" title="Карманный персональный компьютер">КПК</a> до <a href="/wiki/%D0%9C%D0%B5%D0%B9%D0%BD%D1%84%D1%80%D0%B5%D0%B9%D0%BC" title="Мейнфрейм">мейнфреймов</a>. Существуют порты под <a href="/wiki/Microsoft_Windows" class="mw-redirect" title="Microsoft Windows">Microsoft Windows</a>, практически все варианты <a href="/wiki/UNIX" class="mw-redirect" title="UNIX">UNIX</a> (включая <a href="/wiki/FreeBSD" title="FreeBSD">FreeBSD</a> и <a href="/wiki/Linux" title="Linux">Linux</a>), <a href="/wiki/Plan_9" title="Plan 9">Plan 9</a>, <a href="/wiki/Mac_OS" title="Mac OS">Mac OS</a> и <a href="/wiki/MacOS" title="MacOS">macOS</a>, <a href="/wiki/IOS" title="IOS">iPhone OS (iOS)</a> 2.0 и выше, <a href="/wiki/IPadOS" title="IPadOS">iPadOS</a>, <a href="/wiki/Palm_OS" title="Palm OS">Palm OS</a>, <a href="/wiki/OS/2" title="OS/2">OS/2</a>, <a href="/wiki/Amiga" title="Amiga">Amiga</a>, <a href="/wiki/HaikuOS" class="mw-redirect" title="HaikuOS">HaikuOS</a>, <a href="/wiki/AS/400" class="mw-redirect" title="AS/400">AS/400</a> и даже <a href="/wiki/OS/390" class="mw-redirect" title="OS/390">OS/390</a>, <a href="/wiki/Windows_Mobile" title="Windows Mobile">Windows Mobile</a>, <a href="/wiki/Symbian" class="mw-redirect" title="Symbian">Symbian</a> и <a href="/wiki/Android" title="Android">Android</a><sup id="cite_ref-27" class="reference"><a href="#cite_note-27">&#91;23&#93;</a></sup>.
</p><p>По мере устаревания платформы её поддержка в основной ветви языка прекращается. Например, с версии 2.6 прекращена поддержка <a href="/wiki/Windows_95" title="Windows 95">Windows 95</a>, <a href="/wiki/Windows_98" title="Windows 98">Windows 98</a> и <a href="/wiki/Windows_ME" title="Windows ME">Windows ME</a><sup id="cite_ref-28" class="reference"><a href="#cite_note-28">&#91;24&#93;</a></sup>. В версии 3.5 перестала поддерживаться <a href="/wiki/Windows_XP" title="Windows XP">Windows XP</a>, а минимальным требованием является <a href="/wiki/Windows_Vista" title="Windows Vista">Windows Vista</a><sup id="cite_ref-29" class="reference"><a href="#cite_note-29">&#91;25&#93;</a></sup>. Однако на устаревших платформах можно использовать предыдущие версии Python&#160;— на данный момент сообщество активно поддерживает версии Python начиная от 2.3 (для них выходят исправления).
</p><p>При этом, в отличие от многих портируемых систем, для всех основных платформ Python имеет поддержку характерных для данной платформы технологий (например, Microsoft <a href="/wiki/Microsoft_Component_Object_Model" class="mw-redirect" title="Microsoft Component Object Model">COM</a>/<a href="/wiki/Microsoft_Distributed_Component_Object_Model" class="mw-redirect" title="Microsoft Distributed Component Object Model">DCOM</a>). Более того, существует специальная версия Python для <a href="/wiki/%D0%92%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D0%B0_Java" class="mw-redirect" title="Виртуальная машина Java">виртуальной машины Java</a>&#160;— <a href="/wiki/Jython" title="Jython">Jython</a>, что позволяет интерпретатору выполняться на любой системе, поддерживающей <a href="/wiki/Java" title="Java">Java</a>, при этом классы <a href="/wiki/Java" title="Java">Java</a> могут непосредственно использоваться из Python и даже быть написанными на Python. Также несколько проектов обеспечивают интеграцию с платформой <a href="/wiki/Microsoft.NET" class="mw-redirect" title="Microsoft.NET">Microsoft.NET</a>, основные из которых&#160;— <a href="/wiki/IronPython" title="IronPython">IronPython</a> и <a href="/w/index.php?title=Python.Net&amp;action=edit&amp;redlink=1" class="new" title="Python.Net (страница отсутствует)">Python.Net</a>.
</p>
<h2><span id=".D0.A2.D0.B8.D0.BF.D1.8B_.D0.B8_.D1.81.D1.82.D1.80.D1.83.D0.BA.D1.82.D1.83.D1.80.D1.8B_.D0.B4.D0.B0.D0.BD.D0.BD.D1.8B.D1.85"></span><span class="mw-headline" id="Типы_и_структуры_данных">Типы и структуры данных</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=5" class="mw-editsection-visualeditor" title="Редактировать раздел «Типы и структуры данных»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=5" title="Редактировать раздел «Типы и структуры данных»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="thumb tright"><div class="thumbinner" style="width:222px;"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Python_3._The_standard_type_hierarchy.png" class="image"><img alt="Python 3. The standard type hierarchy.png" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/10/Python_3._The_standard_type_hierarchy.png/220px-Python_3._The_standard_type_hierarchy.png" decoding="async" width="220" height="311" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/10/Python_3._The_standard_type_hierarchy.png/330px-Python_3._The_standard_type_hierarchy.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/10/Python_3._The_standard_type_hierarchy.png/440px-Python_3._The_standard_type_hierarchy.png 2x" data-file-width="794" data-file-height="1123" /></a>  <div class="thumbcaption"><div class="magnify"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Python_3._The_standard_type_hierarchy.png" class="internal" title="Увеличить"></a></div></div></div></div>
<p>Python поддерживает <a href="/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F" title="Динамическая типизация">динамическую типизацию</a>, то есть тип переменной определяется только во время исполнения. Поэтому вместо «присваивания значения переменной» лучше говорить о «связывании значения с некоторым именем». В Python имеются встроенные типы: <a href="/wiki/%D0%91%D1%83%D0%BB%D0%B5%D0%B2%D1%81%D0%BA%D0%B8%D0%B9_%D1%82%D0%B8%D0%BF" class="mw-redirect" title="Булевский тип">булевый</a>, <a href="/wiki/%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%8B%D0%B9_%D1%82%D0%B8%D0%BF" title="Строковый тип">строка</a>, <a href="/wiki/Unicode" class="mw-redirect" title="Unicode">Unicode</a>-строка, целое число произвольной точности, число <a href="/wiki/%D0%9F%D0%BB%D0%B0%D0%B2%D0%B0%D1%8E%D1%89%D0%B0%D1%8F_%D0%B7%D0%B0%D0%BF%D1%8F%D1%82%D0%B0%D1%8F" class="mw-redirect" title="Плавающая запятая">с плавающей запятой</a>, <a href="/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%81%D0%BD%D0%BE%D0%B5_%D1%87%D0%B8%D1%81%D0%BB%D0%BE" title="Комплексное число">комплексное число</a> и некоторые другие. Из <a href="/wiki/%D0%9A%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Коллекция (программирование)">коллекций</a> в Python встроены: <a href="/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Список (информатика)">список</a>, <a href="/wiki/%D0%9A%D0%BE%D1%80%D1%82%D0%B5%D0%B6_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Кортеж (информатика)">кортеж</a> (<i>неизменяемый список</i>), <a href="/wiki/%D0%90%D1%81%D1%81%D0%BE%D1%86%D0%B8%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2" title="Ассоциативный массив">словарь</a>, <a href="/wiki/%D0%9C%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%BE_(%D1%82%D0%B8%D0%BF_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85)" title="Множество (тип данных)">множество</a> и другие<sup id="cite_ref-30" class="reference"><a href="#cite_note-30">&#91;26&#93;</a></sup>. Все значения являются объектами, в том числе функции, методы, модули, классы.
</p><p>Добавить новый тип можно либо написав <a href="/wiki/%D0%9A%D0%BB%D0%B0%D1%81%D1%81_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Класс (программирование)">класс</a> (class), либо определив новый тип в модуле расширения (например, написанном на языке C). Система классов поддерживает <a href="/wiki/%D0%9D%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Наследование (программирование)">наследование</a> (одиночное и <a href="/wiki/%D0%9C%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BD%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Множественное наследование">множественное</a>) и <a href="/wiki/%D0%9C%D0%B5%D1%82%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Метапрограммирование">метапрограммирование</a>. Возможно наследование от большинства встроенных типов и типов расширений.
</p><p>Все объекты делятся на изменяемые и неизменяемые: списки, словари и множества являются изменяемыми, а все остальные&#160;— неизменяемыми (например, при изменении строки фактически создаётся новая, а при изменении списка&#160;— только меняются ссылки в нём). Кортеж в Python является, по сути, неизменяемым списком. Во многих случаях кортежи работают быстрее списков<sup id="cite_ref-31" class="reference"><a href="#cite_note-31">&#91;27&#93;</a></sup>, поэтому если вы не планируете изменять последовательность, то лучше использовать именно их. Неизменяемые объекты (и все объекты в них, если это, например, кортеж) могут быть ключами словаря (должны иметь метод hash).
</p>
<h2><span id=".D0.A1.D0.B8.D0.BD.D1.82.D0.B0.D0.BA.D1.81.D0.B8.D1.81_.D0.B8_.D1.81.D0.B5.D0.BC.D0.B0.D0.BD.D1.82.D0.B8.D0.BA.D0.B0"></span><span class="mw-headline" id="Синтаксис_и_семантика">Синтаксис и семантика</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=6" class="mw-editsection-visualeditor" title="Редактировать раздел «Синтаксис и семантика»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=6" title="Редактировать раздел «Синтаксис и семантика»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Язык обладает чётким и последовательным синтаксисом, продуманной модульностью и <a href="/wiki/%D0%9C%D0%B0%D1%81%D1%88%D1%82%D0%B0%D0%B1%D0%B8%D1%80%D1%83%D0%B5%D0%BC%D0%BE%D1%81%D1%82%D1%8C" title="Масштабируемость">масштабируемостью</a>, благодаря чему исходный код написанных на Python программ легко читаем. При передаче аргументов в функции Python использует <a href="/wiki/%D0%92%D1%8B%D0%B7%D0%BE%D0%B2_%D0%BF%D0%BE_%D1%81%D0%BE%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E" class="mw-redirect" title="Вызов по соиспользованию">вызов по соиспользованию</a> (<span lang="en" style="font-style:italic;">call-by-sharing</span>)<sup id="cite_ref-32" class="reference"><a href="#cite_note-32">&#91;28&#93;</a></sup>.
</p><p>В 2018 году <a href="/wiki/%D0%93%D0%B2%D0%B8%D0%B4%D0%BE_%D0%B2%D0%B0%D0%BD_%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC" class="mw-redirect" title="Гвидо ван Россум">Гвидо ван Россум</a>, создатель языка, решил ради <a href="/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D1%82%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BA%D1%82%D0%BD%D0%BE%D1%81%D1%82%D1%8C" class="mw-redirect" title="Политкорректность">политкорректности</a> изменить терминологию кода, заменив в нём термины <code>master</code> и <code>slave</code> на <code>parent</code> и <code>child</code>, соответственно<sup id="cite_ref-33" class="reference"><a href="#cite_note-33">&#91;29&#93;</a></sup>.
</p>
<div class="hatnote dabhide">См. также: <a href="https://en.wikipedia.org/wiki/Python_syntax_and_semantics" class="extiw" title="en:Python syntax and semantics">en:Python syntax and semantics</a></div>
<h3><span id=".D0.9E.D0.BF.D0.B5.D1.80.D0.B0.D1.82.D0.BE.D1.80.D1.8B"></span><span class="mw-headline" id="Операторы">Операторы</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=7" class="mw-editsection-visualeditor" title="Редактировать раздел «Операторы»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=7" title="Редактировать раздел «Операторы»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Набор операторов достаточно традиционен.
</p>
<ul><li>Условный оператор <code>if</code> (если). Альтернативный блок после <code>else</code> (иначе). Если условий и альтернатив несколько, можно использовать <code>elif</code> (сокр. от else if).</li>
<li>Операторы цикла <code>while</code> (пока) и <code>for</code> (для). Внутри цикла возможно применение <code>break</code> и <code>continue</code> для прерывания цикла и перехода сразу к следующей итерации, соответственно.</li>
<li>Оператор определения класса <code>class</code>.</li>
<li>Оператор определения функции, метода или генератора <code>def</code>. Внутри возможно применение <code>return</code> (возврат) для возврата из функции или метода, а в случае генератора&#160;— <code>yield</code> (давать).</li>
<li>Оператор обработки исключений <code>try</code>&#160;— <code>except</code>&#160;— <code>else</code> или <code>try</code>&#160;— <code>finally</code> (начиная с версии 2.5, можно использовать <code>finally</code>, <code>except</code> и <code>else</code> в одном блоке).</li>
<li>Оператор <code>pass</code> ничего не делает. Используется для пустых блоков кода.</li></ul>
<p>Одной из интересных синтаксических особенностей языка является выделение <a href="/wiki/%D0%91%D0%BB%D0%BE%D0%BA_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Блок (программирование)">блоков</a> кода с помощью отступов (пробелов или табуляций), поэтому в Python отсутствуют <a href="/wiki/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5_%D1%81%D0%BA%D0%BE%D0%B1%D0%BA%D0%B8" class="mw-redirect" title="Операторные скобки">операторные скобки</a> begin/end, как в языке <a href="/wiki/%D0%9F%D0%B0%D1%81%D0%BA%D0%B0%D0%BB%D1%8C_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Паскаль (язык программирования)">Паскаль</a>, или фигурные скобки, как в <a href="/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Си (язык программирования)">Си</a>. Такой «трюк» позволяет сократить количество строк и символов в программе и приучает к «хорошему» стилю программирования. С другой стороны, поведение и даже корректность программы может зависеть от начальных пробелов в тексте. Некоторым<span style="background: #ffeaea; color: #444444;"></span><sup class="" style="white-space: nowrap">&#91;<i><a href="/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%98%D0%B7%D0%B1%D0%B5%D0%B3%D0%B0%D0%B9%D1%82%D0%B5_%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D1%85_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9" title="Википедия:Избегайте неопределённых выражений"><span title="Википедия:Избегайте неопределённых выражений" style="">кому?</span></a></i>&#93;</sup> такое поведение может показаться не интуитивным и неудобным.
</p>
<h3><span id=".D0.92.D1.8B.D1.80.D0.B0.D0.B6.D0.B5.D0.BD.D0.B8.D1.8F"></span><span class="mw-headline" id="Выражения">Выражения</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=8" class="mw-editsection-visualeditor" title="Редактировать раздел «Выражения»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=8" title="Редактировать раздел «Выражения»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Выражение является полноправным оператором в Python. Состав, синтаксис, ассоциативность и приоритет операций достаточно привычны для языков программирования и призваны минимизировать употребление скобок.
</p><p>Отдельно стоит упомянуть <i>операцию форматирования</i> для строк (работает по аналогии с функцией <code>printf()</code> из Си), которая использует тот же символ, что и взятие остатка от деления:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">str_var</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hello, </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="n">str_var</span><span class="p">)</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">world</span>
</pre></div>
<p>Python имеет удобные <i>цепочечные сравнения</i>. Такие условия в программах&#160;— не редкость:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="ow">and</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">20</span>
</pre></div>
<p>Кроме того, логические операции (<code>or</code> и <code>and</code>) являются <a href="/wiki/%D0%9B%D0%B5%D0%BD%D0%B8%D0%B2%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F" title="Ленивые вычисления">ленивыми</a>: если для вычисления значения операции достаточно первого операнда, этот операнд и является результатом, в противном случае вычисляется второй операнд логической операции. Это основывается на свойствах <a href="/wiki/%D0%90%D0%BB%D0%B3%D0%B5%D0%B1%D1%80%D0%B0_%D0%BB%D0%BE%D0%B3%D0%B8%D0%BA%D0%B8" title="Алгебра логики">алгебры логики</a>: например, если один аргумент операции «ИЛИ» (<code>or</code>) является истиной, то и результат этой операции всегда является истиной. В случае, если второй операнд является сложным выражением, это позволяет сократить издержки на его вычисление. Этот факт широко использовался до версии 2.5 вместо условной конструкции:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="ow">and</span> <span class="s2">&quot;меньше&quot;</span> <span class="ow">or</span> <span class="s2">&quot;больше или равно&quot;</span>
</pre></div>
<p>Встроенные типы данных, как правило, имеют особый синтаксис для своих литералов (записанных в исходном коде констант):
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="s2">&quot;строка и Юникод-строка одновременно&quot;</span>
<span class="s1">&#39;строка и Юникод-строка одновременно&#39;</span>
<span class="sd">&quot;&quot;&quot;тоже строка и Юникод-строка одновременно&quot;&quot;&quot;</span>
<span class="kc">True</span> <span class="ow">or</span> <span class="kc">False</span>  <span class="c1"># булевы литералы</span>
<span class="mf">3.14</span>  <span class="c1"># число с плавающей запятой</span>
<span class="mb">0b1010</span> <span class="o">+</span> <span class="mo">0o12</span> <span class="o">+</span> <span class="mh">0xA</span>  <span class="c1"># числа в двоичной, восьмеричной и шестнадцатеричной системах счисления</span>
<span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="n">j</span>  <span class="c1"># комплексное число</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">]</span>  <span class="c1"># список</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">)</span>  <span class="c1"># кортеж</span>
<span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="s1">&#39;B&#39;</span><span class="p">}</span>  <span class="c1"># словарь</span>
<span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mf">8.8</span><span class="p">}</span>  <span class="c1"># множество</span>
<span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span>  <span class="c1"># анонимная функция</span>
</pre></div>
<p>Для списков (и других последовательностей) Python предлагает набор операций над срезами. Особенностью является индексация, которая может показаться новичку странной, но раскрывает свою согласованность по мере использования. Индексы элементов списка начинаются с нуля. Запись среза <code>s[N:M]</code> означает, что в срез попадают все элементы от N включительно до M не включая. В качестве иллюстрации можно посмотреть <a href="https://ru.wikiversity.org/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC_%D0%BD%D0%B0_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B5_Python#Примеры_работы_с_последовательностями" class="extiw" title="v:Примеры программ на языке Python">пример работы с последовательностями</a>. При этом индекс можно не указывать. Например, запись <code>s[:M]</code> означает, что в срез попадают все элементы с самого начала; запись <code>s[N:]</code> означает, что попадают все элементы до конца среза; запись <code>s[:]</code> означает, что попадают все элементы с начала и до конца.
</p>
<h3><span id=".D0.98.D0.BC.D0.B5.D0.BD.D0.B0"></span><span class="mw-headline" id="Имена">Имена</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=9" class="mw-editsection-visualeditor" title="Редактировать раздел «Имена»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=9" title="Редактировать раздел «Имена»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Имя (идентификатор) может начинаться с латинской буквы (в Python 3&#160;— буквы любого алфавита в Юникоде, например кириллицы) любого регистра или подчёркивания, после чего в имени можно использовать и цифры. В качестве имени нельзя использовать ключевые слова (их список можно узнать по <code>import keyword; print(keyword.kwlist)</code>) и нежелательно переопределять встроенные имена. Имена, начинающиеся с символа подчёркивания, имеют специальное значение<sup id="cite_ref-34" class="reference"><a href="#cite_note-34">&#91;30&#93;</a></sup>.
</p><p>В каждой точке программы интерпретатор имеет доступ к трём <a href="/wiki/%D0%9F%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%82%D0%B2%D0%BE_%D0%B8%D0%BC%D1%91%D0%BD_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Пространство имён (программирование)">пространствам имён</a> (то есть отображениям имён в объекты): локальному, глобальному и встроенному.
</p><p><i>Области видимости</i> имён могут быть вложенными друг в друга (внутри определяемой функции видны имена из окружающего блока кода). На практике с областями видимости и связыванием имён связано несколько правил «хорошего тона», о которых можно подробнее узнать из документации.
</p>
<h3><span id=".D0.A1.D1.82.D1.80.D0.BE.D0.BA.D0.B8_.D0.B4.D0.BE.D0.BA.D1.83.D0.BC.D0.B5.D0.BD.D1.82.D0.B0.D1.86.D0.B8.D0.B8"></span><span class="mw-headline" id="Строки_документации">Строки документации</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=10" class="mw-editsection-visualeditor" title="Редактировать раздел «Строки документации»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=10" title="Редактировать раздел «Строки документации»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Python предлагает механизм <a href="/wiki/%D0%A2%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F" title="Техническая документация">документирования</a> кода pydoc. В начало каждого модуля, класса, функции вставляется строка документации&#160;— <i><a href="/w/index.php?title=Docstring&amp;action=edit&amp;redlink=1" class="new" title="Docstring (страница отсутствует)">docstring</a><span class="noprint" style="white-space:nowrap;font-size:85%"> (<a href="https://en.wikipedia.org/wiki/docstring" class="extiw" title="en:docstring"><span title="Версия статьи «Docstring» на английском языке">англ.</span></a>)</span></i>. Строки документации остаются в коде на момент времени исполнения, и в язык встроен доступ к документации<sup id="cite_ref-35" class="reference"><a href="#cite_note-35">&#91;31&#93;</a></sup>(переменная <code>__doc__</code>), что используется современными IDE (<a href="/wiki/%D0%98%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D1%80%D0%B5%D0%B4%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8" title="Интегрированная среда разработки">Интегрированная среда разработки</a>) (например, <a href="/wiki/Eclipse_(%D1%81%D1%80%D0%B5%D0%B4%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8)" title="Eclipse (среда разработки)">Eclipse</a>).
</p><p>В интерактивном режиме можно получить помощь, сгенерировать гипертекстовую документацию по целому модулю или даже применить <i><a href="/w/index.php?title=Doctest&amp;action=edit&amp;redlink=1" class="new" title="Doctest (страница отсутствует)">doctest</a><span class="noprint" style="white-space:nowrap;font-size:85%"> (<a href="https://en.wikipedia.org/wiki/doctest" class="extiw" title="en:doctest"><span title="Версия статьи «Doctest» на английском языке">англ.</span></a>)</span></i> для автоматического тестирования модуля.
</p>
<h3><span id=".D0.94.D0.B8.D1.80.D0.B5.D0.BA.D1.82.D0.B8.D0.B2.D1.8B"></span><span class="mw-headline" id="Директивы">Директивы</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=11" class="mw-editsection-visualeditor" title="Редактировать раздел «Директивы»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=11" title="Редактировать раздел «Директивы»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Начиная с Python 2.3, для использования в тексте программы символов, не входящих в ASCII, необходимо явно указывать кодировку исходного кода в начале модуля, например:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="c1"># или</span>
<span class="c1"># coding: utf-8</span>
</pre></div>
<p>После этого можно использовать, например, кириллицу в Unicode-литералах. Но на самом деле даже если написать:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># coding: utf</span>
</pre></div>
<p>то Python «поймёт», что вы хотели сделать.
</p>
<h2><span id=".D0.92.D0.BE.D0.B7.D0.BC.D0.BE.D0.B6.D0.BD.D0.BE.D1.81.D1.82.D0.B8"></span><span class="mw-headline" id="Возможности">Возможности</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=12" class="mw-editsection-visualeditor" title="Редактировать раздел «Возможности»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=12" title="Редактировать раздел «Возможности»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span id=".D0.9E.D0.B1.D1.8A.D0.B5.D0.BA.D1.82.D0.BD.D0.BE-.D0.BE.D1.80.D0.B8.D0.B5.D0.BD.D1.82.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.BD.D0.BE.D0.B5_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.B8.D0.B5"></span><span class="mw-headline" id="Объектно-ориентированное_программирование">Объектно-ориентированное программирование</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=13" class="mw-editsection-visualeditor" title="Редактировать раздел «Объектно-ориентированное программирование»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=13" title="Редактировать раздел «Объектно-ориентированное программирование»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Дизайн языка Python построен вокруг объектно-ориентированной модели программирования. Реализация <a href="/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Объектно-ориентированное программирование">ООП</a> в Python является элегантной, мощной и хорошо продуманной, но вместе с тем достаточно специфической по сравнению с другими <a href="/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Объектно-ориентированный язык программирования">объектно-ориентированными языками</a>.
</p><p>Возможности и особенности.
</p>
<ul><li>Классы являются одновременно объектами со всеми ниже приведёнными возможностями.</li>
<li>Наследование, в том числе множественное.</li>
<li><a href="/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Полиморфизм (информатика)">Полиморфизм</a> (все функции виртуальные), <a href="/wiki/%D0%9E%D0%B1%D0%BE%D0%B1%D1%89%D1%91%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Обобщённое программирование">Дженерики</a><sup id="cite_ref-36" class="reference"><a href="#cite_note-36">&#91;32&#93;</a></sup>.</li>
<li><a href="/wiki/%D0%98%D0%BD%D0%BA%D0%B0%D0%BF%D1%81%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Инкапсуляция (программирование)">Инкапсуляция</a> (два уровня&#160;— общедоступные и скрытые методы и поля). Особенность&#160;— скрытые члены доступны для использования и помечены как скрытые лишь особыми именами.</li>
<li>Специальные методы, управляющие жизненным циклом объекта: конструкторы, деструкторы, распределители памяти.</li>
<li>Перегрузка операторов (всех, кроме <code>is, '.', '='</code> и символьных логических).</li>
<li>Свойства (имитация поля с помощью функций).</li>
<li>Управление доступом к полям (эмуляция полей и методов, частичный доступ, и&#160;т.&#160;п.).</li>
<li>Методы для управления наиболее распространёнными операциями (истинностное значение, <code>len()</code>, глубокое копирование, <a href="/wiki/%D0%A1%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F" title="Сериализация">сериализация</a>, итерация по объекту, …)</li>
<li>Метапрограммирование (управление созданием классов, триггеры на создание классов, и др.)</li>
<li>Полная <a href="/wiki/%D0%98%D0%BD%D1%82%D1%80%D0%BE%D1%81%D0%BF%D0%B5%D0%BA%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Интроспекция (программирование)">интроспекция</a>.</li>
<li>Классовые и статические методы, классовые поля.</li>
<li>Классы, вложенные в функции и классы.</li></ul>
<h3><span id=".D0.9E.D0.B1.D0.BE.D0.B1.D1.89.D0.B5.D0.BD.D0.BD.D0.BE.D0.B5_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.B8.D0.B5"></span><span class="mw-headline" id="Обобщенное_программирование">Обобщенное программирование</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=14" class="mw-editsection-visualeditor" title="Редактировать раздел «Обобщенное программирование»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=14" title="Редактировать раздел «Обобщенное программирование»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Python поддерживает парадигму <a href="/wiki/%D0%9E%D0%B1%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" class="mw-redirect" title="Обобщенное программирование">обобщенного программирования</a>, в частности:
</p>
<ul><li><a href="/wiki/%D0%9E%D0%B1%D0%BE%D0%B1%D1%89%D1%91%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Обобщённое программирование">Дженерики</a><sup id="cite_ref-37" class="reference"><a href="#cite_note-37">&#91;33&#93;</a></sup>.</li></ul>
<h3><span id=".D0.A4.D1.83.D0.BD.D0.BA.D1.86.D0.B8.D0.BE.D0.BD.D0.B0.D0.BB.D1.8C.D0.BD.D0.BE.D0.B5_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.B8.D0.B5"></span><span class="mw-headline" id="Функциональное_программирование">Функциональное программирование</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=15" class="mw-editsection-visualeditor" title="Редактировать раздел «Функциональное программирование»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=15" title="Редактировать раздел «Функциональное программирование»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Python поддерживает парадигму <a href="/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Функциональное программирование">функционального программирования</a>, в частности:
</p>
<ul><li>функция является объектом;</li>
<li>функции высших порядков;</li>
<li>рекурсия;</li>
<li>развитая обработка списков (списочные выражения, операции над последовательностями, итераторы);</li>
<li>аналог <a href="/wiki/%D0%97%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Замыкание (программирование)">замыканий</a>;</li>
<li>частичное применение функции;</li>
<li>возможность реализации других средств на самом языке (например, <a href="/wiki/%D0%9A%D0%B0%D1%80%D1%80%D0%B8%D0%BD%D0%B3" class="mw-redirect" title="Карринг">карринг</a>).</li></ul>
<h3><span id=".D0.9C.D0.BE.D0.B4.D1.83.D0.BB.D0.B8_.D0.B8_.D0.BF.D0.B0.D0.BA.D0.B5.D1.82.D1.8B"></span><span class="mw-headline" id="Модули_и_пакеты">Модули и пакеты</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=16" class="mw-editsection-visualeditor" title="Редактировать раздел «Модули и пакеты»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=16" title="Редактировать раздел «Модули и пакеты»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Программное обеспечение (приложение или библиотека) на Python оформляется в виде <a href="/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" class="mw-redirect" title="Модуль (программирование)">модулей</a>, которые в свою очередь могут быть собраны в <i>пакеты</i>. Модули могут располагаться как в <a href="/wiki/%D0%9A%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3_(%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0)" title="Каталог (файловая система)">каталогах</a>, так и в <a href="/wiki/ZIP" title="ZIP">ZIP-архивах</a>. Модули могут быть двух типов по своему происхождению: модули, написанные на «чистом» Python, и модули расширения (extension modules), написанные на других языках программирования. Например, в стандартной библиотеке есть «чистый» модуль pickle и его аналог на Си: cPickle. Модуль оформляется в виде отдельного файла, а пакет&#160;— в виде отдельного каталога. Подключение модуля к программе осуществляется оператором <code>import</code>. После импорта модуль представлен отдельным объектом, дающим доступ к пространству имён модуля. В ходе выполнения программы модуль можно перезагрузить функцией <code>reload()</code>.
</p>
<h3><span id=".D0.98.D0.BD.D1.82.D1.80.D0.BE.D1.81.D0.BF.D0.B5.D0.BA.D1.86.D0.B8.D1.8F"></span><span class="mw-headline" id="Интроспекция">Интроспекция</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=17" class="mw-editsection-visualeditor" title="Редактировать раздел «Интроспекция»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=17" title="Редактировать раздел «Интроспекция»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="hatnote">Основная статья: <b><a href="/wiki/%D0%98%D0%BD%D1%82%D1%80%D0%BE%D1%81%D0%BF%D0%B5%D0%BA%D1%86%D0%B8%D1%8F_%D0%B2_Python" title="Интроспекция в Python">Интроспекция в Python</a></b></div>
<p>Python поддерживает полную <a href="/wiki/%D0%98%D0%BD%D1%82%D1%80%D0%BE%D1%81%D0%BF%D0%B5%D0%BA%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Интроспекция (программирование)">интроспекцию</a> времени исполнения. Это означает, что для любого объекта можно получить всю информацию о его внутренней структуре.
</p><p>Применение интроспекции является важной частью того, что называют <a href="/w/index.php?title=Pythonic_style&amp;action=edit&amp;redlink=1" class="new" title="Pythonic style (страница отсутствует)">pythonic style</a>, и широко применяется в библиотеках и <a href="/wiki/%D0%A4%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA" title="Фреймворк">фреймворках</a> Python, таких как <a href="/w/index.php?title=PyRO&amp;action=edit&amp;redlink=1" class="new" title="PyRO (страница отсутствует)">PyRO</a>, PLY, Cherry, <a href="/wiki/Django" title="Django">Django</a> и др., значительно экономя время использующего их программиста.
</p><p><br />
</p>
<h3><span id=".D0.9E.D0.B1.D1.80.D0.B0.D0.B1.D0.BE.D1.82.D0.BA.D0.B0_.D0.B8.D1.81.D0.BA.D0.BB.D1.8E.D1.87.D0.B5.D0.BD.D0.B8.D0.B9"></span><span class="mw-headline" id="Обработка_исключений">Обработка исключений</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=18" class="mw-editsection-visualeditor" title="Редактировать раздел «Обработка исключений»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=18" title="Редактировать раздел «Обработка исключений»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D0%B8%D1%81%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B9" title="Обработка исключений">Обработка исключений</a> поддерживается в Python посредством операторов <code>try, except, else, finally, raise</code>, образующих блок обработки исключения. В общем случае блок выглядит следующим образом:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">try</span><span class="p">:</span>
    <span class="c1"># Здесь код, который может вызвать исключение</span>
    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">)</span>  <span class="c1"># Exception, это один из стандартных типов исключения (всего лишь класс),</span>
                                <span class="c1"># может использоваться любой другой, в том числе свой</span>
<span class="k">except</span> <span class="p">(</span><span class="n">Тип</span> <span class="n">исключения1</span><span class="p">,</span> <span class="n">Тип</span> <span class="n">исключения2</span><span class="p">,</span> <span class="err">…</span><span class="p">)</span> <span class="k">as</span> <span class="n">Переменная</span><span class="p">:</span>
    <span class="c1"># Код в блоке выполняется, если тип исключения совпадает с одним из типов</span>
    <span class="c1"># (Тип исключения1, Тип исключения2, …) или является наследником одного</span>
    <span class="c1"># из этих типов.</span>
    <span class="c1"># Полученное исключение доступно в необязательной Переменной.</span>
<span class="k">except</span> <span class="p">(</span><span class="n">Тип</span> <span class="n">исключения3</span><span class="p">,</span> <span class="n">Тип</span> <span class="n">исключения4</span><span class="p">,</span> <span class="err">…</span><span class="p">)</span> <span class="k">as</span> <span class="n">Переменная</span><span class="p">:</span>
    <span class="c1"># Количество блоков except не ограничено</span>
    <span class="k">raise</span>  <span class="c1"># Сгенерировать исключение &quot;поверх&quot; полученного; без параметров - повторно сгенерировать полученное</span>
<span class="k">except</span><span class="p">:</span>
    <span class="c1"># Будет выполнено при любом исключении, не обработанном типизированными блоками except</span>
<span class="k">else</span><span class="p">:</span>
    <span class="c1"># Код блока выполняется, если не было поймано исключений.</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="c1"># Будет исполнено в любом случае, возможно после соответствующего</span>
    <span class="c1"># блока except или else</span>
</pre></div>
<p>Совместное использование <code>else, except</code> и <code>finally</code> стало возможно только начиная с Python 2.5. Информация о текущем исключении всегда доступна через <code>sys.exc_info()</code>. Кроме значения исключения, Python также сохраняет состояние стека вплоть до точки возбуждения исключения&#160;— так называемый traceback.
</p><p>В отличие от компилируемых языков программирования, в Python использование исключения не приводит к значительным накладным расходам (а зачастую даже позволяет ускорить исполнение программ) и очень широко используется. Исключения согласуются с философией Python (10-й пункт «<a href="#Философия">дзена Python</a>»&#160;— «Ошибки никогда не должны умалчиваться») и являются одним из средств поддержки «<a href="/wiki/%D0%A3%D1%82%D0%B8%D0%BD%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F" title="Утиная типизация">утиной типизации</a>».
</p><p>Иногда вместо явной обработки исключений удобнее использовать блок <a href="/wiki/Python#Управление_контекстом_выполнения" title="Python"><code>with</code></a> (доступен, начиная с Python 2.5).
</p>
<h3><span id=".D0.98.D1.82.D0.B5.D1.80.D0.B0.D1.82.D0.BE.D1.80.D1.8B"></span><span class="mw-headline" id="Итераторы">Итераторы</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=19" class="mw-editsection-visualeditor" title="Редактировать раздел «Итераторы»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=19" title="Редактировать раздел «Итераторы»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>В программах на Python широко используются <a href="/wiki/%D0%98%D1%82%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" class="mw-redirect" title="Итератор (программирование)">итераторы</a>. Цикл <code>for</code> может работать как с последовательностью, так и с итератором. Большинство коллекций предоставляют итераторы, итераторы могут также определяться пользователем для собственных объектов. Модуль <code>itertools</code> стандартной библиотеки содержит средства работы с итераторами.
</p>
<h3><span id=".D0.93.D0.B5.D0.BD.D0.B5.D1.80.D0.B0.D1.82.D0.BE.D1.80.D1.8B"></span><span class="mw-headline" id="Генераторы">Генераторы</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=20" class="mw-editsection-visualeditor" title="Редактировать раздел «Генераторы»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=20" title="Редактировать раздел «Генераторы»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Одной из интересных возможностей языка являются <b>генераторы</b>&#160;— функции, сохраняющие внутреннее состояние: значения локальных переменных и текущую инструкцию (см. также: <a href="/wiki/%D0%A1%D0%BE%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0" title="Сопрограмма">сопрограммы</a>). Генераторы могут использоваться как <a href="/wiki/%D0%98%D1%82%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" class="mw-redirect" title="Итератор (программирование)">итераторы</a> для структур данных и для <a href="/wiki/%D0%9B%D0%B5%D0%BD%D0%B8%D0%B2%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F" title="Ленивые вычисления">ленивых вычислений</a>. См. пример: <a href="https://ru.wikiversity.org/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC_%D0%BD%D0%B0_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B5_Python#Генератор_чисел_Фибоначчи" class="extiw" title="v:Примеры программ на языке Python">генератор чисел Фибоначчи</a>.
</p><p>При вызове генератора функция немедленно возвращает объект-итератор, который хранит текущую точку исполнения и состояние локальных переменных функции. При запросе следующего значения (посредством метода <code>next()</code>, неявно вызываемого в цикле <code>for</code>) генератор продолжает исполнение функции от предыдущей точки останова до следующего оператора <code>yield</code> или <code>return</code>.
</p><p>В Python 2.4 появились <b>генераторные выражения</b>&#160;— выражения, дающие в результате генератор. Генераторные выражения позволяют сэкономить память там, где иначе требовалось бы использовать список с промежуточными результатами:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
<span class="mi">2500</span>
</pre></div>
<p>В этом примере суммируются все нечётные числа от 1 до 99.
</p><p>Начиная с версии 2.5, Python поддерживает полноценные сопроцедуры: теперь в генератор можно передавать значения с помощью метода <code>send()</code> и возбуждать в его контексте исключения с помощью метода <code>throw()</code>.
</p><p>Также Python поддерживает вложенные генераторы. Например, для создания двумерного массива нужно разместить генератор списка, являющегося строкой, внутри генератора всех строк: <code>[[0 for j in range(m)] for i in range(n)]</code>
</p>
<h3><span id=".D0.A3.D0.BF.D1.80.D0.B0.D0.B2.D0.BB.D0.B5.D0.BD.D0.B8.D0.B5_.D0.BA.D0.BE.D0.BD.D1.82.D0.B5.D0.BA.D1.81.D1.82.D0.BE.D0.BC_.D0.B2.D1.8B.D0.BF.D0.BE.D0.BB.D0.BD.D0.B5.D0.BD.D0.B8.D1.8F"></span><span class="mw-headline" id="Управление_контекстом_выполнения">Управление контекстом выполнения</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=21" class="mw-editsection-visualeditor" title="Редактировать раздел «Управление контекстом выполнения»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=21" title="Редактировать раздел «Управление контекстом выполнения»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>В Python 2.5 появились средства для управления контекстом выполнения блока кода&#160;— оператор <code>with</code> и модуль <code>contextlib</code>. См.: <a href="https://ru.wikiversity.org/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC_%D0%BD%D0%B0_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B5_Python#Управление_контекстом_выполнения" class="extiw" title="v:Примеры программ на языке Python">пример</a>.
</p><p>Оператор может применяться в тех случаях, когда до и после некоторых действий должны обязательно выполняться некоторые другие действия, независимо от возбуждённых в блоке исключений или операторов <code>return</code>: файлы должны быть закрыты, ресурсы освобождены, перенаправление стандартного ввода вывода закончено и&#160;т.&#160;п. Оператор улучшает читаемость кода, а значит, помогает предотвращать ошибки.
</p>
<h3><span id=".D0.94.D0.B5.D0.BA.D0.BE.D1.80.D0.B0.D1.82.D0.BE.D1.80.D1.8B"></span><span class="mw-headline" id="Декораторы">Декораторы</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=22" class="mw-editsection-visualeditor" title="Редактировать раздел «Декораторы»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=22" title="Редактировать раздел «Декораторы»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Начиная с версии 2.4, Python позволяет использовать так называемые <i>декораторы</i><sup id="cite_ref-38" class="reference"><a href="#cite_note-38">&#91;34&#93;</a></sup><sup id="cite_ref-39" class="reference"><a href="#cite_note-39">&#91;35&#93;</a></sup> (не следует путать с <a href="/wiki/%D0%94%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Декоратор (шаблон проектирования)">одноимённым</a> <a href="/wiki/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%8B_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" class="mw-redirect" title="Шаблоны проектирования">шаблоном проектирования</a>) для поддержки существующей практики преобразования функций и методов в месте определения (декораторов может быть несколько). Для декораторов используется символ <code>@</code> в строках, предшествующих определению функции или метода. Синтаксис декорирования является <a href="/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%81%D0%B0%D1%85%D0%B0%D1%80" title="Синтаксический сахар">синтаксическим сахаром</a><sup id="cite_ref-40" class="reference"><a href="#cite_note-40">&#91;36&#93;</a></sup><sup id="cite_ref-41" class="reference"><a href="#cite_note-41">&#91;37&#93;</a></sup> для удобочитаемости: код
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">my_wonderful_method</span><span class="p">():</span>
    <span class="k">return</span> <span class="s2">&quot;Некоторый метод&quot;</span>
</pre></div>
<p>полностью эквивалентен
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">my_wonderful_method</span><span class="p">():</span>
    <span class="k">return</span> <span class="s2">&quot;Некоторый метод&quot;</span>
<span class="n">my_wonderful_method</span> <span class="o">=</span> <span class="nb">staticmethod</span><span class="p">(</span><span class="n">my_wonderful_method</span><span class="p">)</span>
</pre></div>
<p>Сам декоратор является функцией, получающей в качестве первого аргумента декорируемую функцию. Для передачи дополнительных аргументов можно использовать синтаксис <code>@декоратор(аргументы)</code>. Декораторы можно считать элементом <a href="/wiki/%D0%90%D1%81%D0%BF%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Аспектно-ориентированное программирование">аспектно-ориентированного программирования</a>.
</p><p>С версии 2.6 декораторы можно использовать с классами аналогично функциям.
</p>
<h3><span id=".D0.A0.D0.B5.D0.B3.D1.83.D0.BB.D1.8F.D1.80.D0.BD.D1.8B.D0.B5_.D0.B2.D1.8B.D1.80.D0.B0.D0.B6.D0.B5.D0.BD.D0.B8.D1.8F"></span><span class="mw-headline" id="Регулярные_выражения">Регулярные выражения</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=23" class="mw-editsection-visualeditor" title="Редактировать раздел «Регулярные выражения»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=23" title="Редактировать раздел «Регулярные выражения»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Формат <a href="/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F" title="Регулярные выражения">регулярных выражений</a> унаследован из <a href="/wiki/Perl" title="Perl">Perl</a> с некоторыми отличиями. Для их использования требуется импортировать модуль <code>re</code><sup id="cite_ref-42" class="reference"><a href="#cite_note-42">&#91;38&#93;</a></sup>, являющийся частью стандартной библиотеки.
</p>
<h3><span id=".D0.94.D1.80.D1.83.D0.B3.D0.B8.D0.B5_.D0.B2.D0.BE.D0.B7.D0.BC.D0.BE.D0.B6.D0.BD.D0.BE.D1.81.D1.82.D0.B8"></span><span class="mw-headline" id="Другие_возможности">Другие возможности</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=24" class="mw-editsection-visualeditor" title="Редактировать раздел «Другие возможности»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=24" title="Редактировать раздел «Другие возможности»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>В Python есть ещё несколько возможностей, отличающих его от многих других языков высокой гибкостью и динамичностью.
</p><p>Например, класс является объектом, а в операторе определения класса в списке родительских классов можно использовать выражения.
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">get_class</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">dict</span>

<span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="n">get_class</span><span class="p">()):</span>
    <span class="k">pass</span>

<span class="n">d</span> <span class="o">=</span> <span class="n">D</span><span class="p">()</span>
</pre></div>
<p>Можно модифицировать многие объекты во время исполнения, например классы:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">X</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span> <span class="k">pass</span>
<span class="err">…</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">X</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">wrong_method</span><span class="p">()</span>  <span class="c1"># такого метода пока нет</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s2">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="ne">AttributeError</span><span class="p">:</span> <span class="s1">&#39;X&#39;</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;wrong_method&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">X</span><span class="o">.</span><span class="n">wrong_method</span> <span class="o">=</span> <span class="k">lambda</span> <span class="bp">self</span> <span class="p">:</span> <span class="s1">&#39;im here&#39;</span> <span class="c1"># добавим его</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">wrong_method</span><span class="p">()</span> <span class="c1"># так как доступ к методу приводит к поиску по __dict__ класса,</span>
<span class="s1">&#39;im here&#39;</span> <span class="c1"># то wrong_method становится доступным всем экземплярам</span>
</pre></div>
<h2><span id=".D0.91.D0.B8.D0.B1.D0.BB.D0.B8.D0.BE.D1.82.D0.B5.D0.BA.D0.B8"></span><span class="mw-headline" id="Библиотеки">Библиотеки</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=25" class="mw-editsection-visualeditor" title="Редактировать раздел «Библиотеки»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=25" title="Редактировать раздел «Библиотеки»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span id=".D0.A1.D1.82.D0.B0.D0.BD.D0.B4.D0.B0.D1.80.D1.82.D0.BD.D0.B0.D1.8F_.D0.B1.D0.B8.D0.B1.D0.BB.D0.B8.D0.BE.D1.82.D0.B5.D0.BA.D0.B0"></span><span class="mw-headline" id="Стандартная_библиотека">Стандартная библиотека</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=26" class="mw-editsection-visualeditor" title="Редактировать раздел «Стандартная библиотека»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=26" title="Редактировать раздел «Стандартная библиотека»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="hatnote">Основная статья: <b><a href="/wiki/%D0%A1%D1%82%D0%B0%D0%BD%D0%B4%D0%B0%D1%80%D1%82%D0%BD%D0%B0%D1%8F_%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0_Python" title="Стандартная библиотека Python">Стандартная библиотека Python</a></b></div>
<div class="thumb tright"><div class="thumbinner" style="width:222px;"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Python_batteries_included.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/68/Python_batteries_included.jpg/220px-Python_batteries_included.jpg" decoding="async" width="220" height="94" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/68/Python_batteries_included.jpg/330px-Python_batteries_included.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/68/Python_batteries_included.jpg/440px-Python_batteries_included.jpg 2x" data-file-width="450" data-file-height="192" /></a>  <div class="thumbcaption"><div class="magnify"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Python_batteries_included.jpg" class="internal" title="Увеличить"></a></div>Python поставляется «<a href="/wiki/%D0%A1%D1%82%D0%B0%D0%BD%D0%B4%D0%B0%D1%80%D1%82%D0%BD%D0%B0%D1%8F_%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0_Python" title="Стандартная библиотека Python">с батарейками в комплекте</a>».</div></div></div>
<p>Богатая стандартная <a href="/wiki/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Библиотека (программирование)">библиотека</a> является одной из привлекательных сторон Python. Здесь имеются средства для работы со многими <a href="/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%BE%D0%B9_%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB" class="mw-redirect" title="Сетевой протокол">сетевыми протоколами</a> и форматами <a href="/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82" title="Интернет">Интернета</a>, например, модули для написания <a href="/wiki/HTTP-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80" class="mw-redirect" title="HTTP-сервер">HTTP-серверов</a> и клиентов, для разбора и создания почтовых сообщений, для работы с <a href="/wiki/XML" title="XML">XML</a> и&#160;т.&#160;п. Набор модулей для работы с <a href="/wiki/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0" title="Операционная система">операционной системой</a> позволяет писать кросс-платформенные приложения. Существуют модули для работы с <a href="/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%BE%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5" class="mw-redirect" title="Регулярное выражение">регулярными выражениями</a>, текстовыми <a href="/wiki/%D0%9A%D0%BE%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0" class="mw-redirect" title="Кодировка">кодировками</a>, <a href="/wiki/%D0%9C%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BC%D0%B5%D0%B4%D0%B8%D0%B0" title="Мультимедиа">мультимедийными</a> форматами, <a href="/wiki/%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%8F" title="Криптография">криптографическими</a> протоколами, архивами, <a href="/wiki/%D0%A1%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F" title="Сериализация">сериализации</a> данных, поддержка <a href="/wiki/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" class="mw-redirect" title="Юнит-тестирование">юнит-тестирования</a> и др.
</p>
<h3><span id=".D0.9C.D0.BE.D0.B4.D1.83.D0.BB.D0.B8_.D1.80.D0.B0.D1.81.D1.88.D0.B8.D1.80.D0.B5.D0.BD.D0.B8.D1.8F_.D0.B8_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC.D0.BD.D1.8B.D0.B5_.D0.B8.D0.BD.D1.82.D0.B5.D1.80.D1.84.D0.B5.D0.B9.D1.81.D1.8B"></span><span class="mw-headline" id="Модули_расширения_и_программные_интерфейсы">Модули расширения и программные интерфейсы</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=27" class="mw-editsection-visualeditor" title="Редактировать раздел «Модули расширения и программные интерфейсы»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=27" title="Редактировать раздел «Модули расширения и программные интерфейсы»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Помимо стандартной библиотеки существует множество библиотек, предоставляющих интерфейс ко всем системным вызовам на разных платформах; в частности, на платформе Win32 поддерживаются все вызовы <a href="/wiki/Win32_API" class="mw-redirect" title="Win32 API">Win32 API</a>, а также <a href="/wiki/Component_Object_Model" title="Component Object Model">COM</a> в объёме не меньшем, чем у <a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a> или <a href="/wiki/Delphi_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Delphi (язык программирования)">Delphi</a>. Количество прикладных библиотек для Python в самых разных областях без преувеличения огромно (<a href="/wiki/%D0%92%D1%81%D0%B5%D0%BC%D0%B8%D1%80%D0%BD%D0%B0%D1%8F_%D0%BF%D0%B0%D1%83%D1%82%D0%B8%D0%BD%D0%B0" title="Всемирная паутина">веб</a>, <a href="/wiki/%D0%91%D0%B0%D0%B7%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85" title="База данных">базы данных</a>, обработка изображений, обработка текста, <a href="/wiki/%D0%A7%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B" title="Численные методы">численные методы</a>, приложения <a href="/wiki/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0" title="Операционная система">операционной системы</a> и&#160;т.&#160;д.).
</p><p>Для Python принята спецификация программного интерфейса к базам данных <a href="/w/index.php?title=DB-API_2&amp;action=edit&amp;redlink=1" class="new" title="DB-API 2 (страница отсутствует)">DB-API 2</a> и разработаны соответствующие этой спецификации пакеты для доступа к различным <a href="/wiki/%D0%A1%D0%A3%D0%91%D0%94" class="mw-redirect" title="СУБД">СУБД</a>: <a href="/wiki/Oracle_Database" title="Oracle Database">Oracle</a>, <a href="/wiki/MySQL" title="MySQL">MySQL</a>, <a href="/wiki/PostgreSQL" title="PostgreSQL">PostgreSQL</a>, <a href="/wiki/Sybase" title="Sybase">Sybase</a>, <a href="/wiki/Firebird" title="Firebird">Firebird</a> (<a href="/wiki/Interbase" title="Interbase">Interbase</a>), <a href="/wiki/Informix" title="Informix">Informix</a>, <a href="/wiki/Microsoft_SQL_Server" title="Microsoft SQL Server">Microsoft SQL Server</a> и <a href="/wiki/SQLite" title="SQLite">SQLite</a>. На платформе <a href="/wiki/Windows" title="Windows">Windows</a> доступ к БД возможен через <a href="/wiki/ADO" title="ADO">ADO</a> (<a href="/wiki/ADOdb" title="ADOdb">ADOdb</a>). Коммерческий пакет mxODBC для доступа к СУБД через <a href="/wiki/ODBC" title="ODBC">ODBC</a> для платформ Windows и <a href="/wiki/UNIX" class="mw-redirect" title="UNIX">UNIX</a> разработан eGenix<sup id="cite_ref-43" class="reference"><a href="#cite_note-43">&#91;39&#93;</a></sup>. Для Python написано много <a href="/wiki/ORM" title="ORM">ORM</a> (<a href="/w/index.php?title=SQLObject&amp;action=edit&amp;redlink=1" class="new" title="SQLObject (страница отсутствует)">SQLObject</a>, <a href="/wiki/SQLAlchemy" title="SQLAlchemy">SQLAlchemy</a>, Dejavu, <a href="/wiki/Django" title="Django">Django</a>), выполнены программные каркасы для разработки веб-приложений (<a href="/wiki/Django" title="Django">Django</a>, <a href="/wiki/Pylons" title="Pylons">Pylons</a>, <a href="/wiki/Pyramid_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D1%8B%D0%B9_%D0%BA%D0%B0%D1%80%D0%BA%D0%B0%D1%81)" title="Pyramid (программный каркас)">Pyramid</a>).
</p><p>Библиотека <a href="/wiki/NumPy" title="NumPy">NumPy</a> для работы с многомерными <a href="/wiki/%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" class="mw-redirect" title="Массив (программирование)">массивами</a> позволяет иногда достичь производительности научных расчётов, сравнимой со специализированными пакетами. <a href="/wiki/SciPy" title="SciPy">SciPy</a> использует NumPy и предоставляет доступ к обширному спектру математических алгоритмов (матричная алгебра&#160;— <a href="/wiki/BLAS" class="mw-redirect" title="BLAS">BLAS</a> уровней 1—3, <a href="/wiki/LAPACK" title="LAPACK">LAPACK</a>, <a href="/wiki/%D0%91%D1%8B%D1%81%D1%82%D1%80%D0%BE%D0%B5_%D0%BF%D1%80%D0%B5%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%A4%D1%83%D1%80%D1%8C%D0%B5" title="Быстрое преобразование Фурье">БПФ</a>…). Numarray<sup id="cite_ref-44" class="reference"><a href="#cite_note-44">&#91;40&#93;</a></sup> специально разработан для операций с большими объёмами научных данных.
</p><p><a href="/wiki/WSGI" title="WSGI">WSGI</a><sup id="cite_ref-45" class="reference"><a href="#cite_note-45">&#91;41&#93;</a></sup>&#160;— интерфейс шлюза с веб-сервером (Python Web Server Gateway Interface).
</p><p>Python предоставляет простой и удобный программный интерфейс <a href="/w/index.php?title=C_API&amp;action=edit&amp;redlink=1" class="new" title="C API (страница отсутствует)">C API</a> для написания собственных модулей на языках <a href="/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Си (язык программирования)">Си</a> и <a href="/wiki/C%2B%2B" title="C++">C++</a>. Такой инструмент как <a href="/wiki/SWIG" title="SWIG">SWIG</a> позволяет почти автоматически получать привязки для использования C/C++ библиотек в коде на Python. Возможности этого и других инструментов варьируются от автоматической генерации (C/C++/Fortran)-Python интерфейсов по специальным файлам (SWIG, pyste<sup id="cite_ref-46" class="reference"><a href="#cite_note-46">&#91;42&#93;</a></sup>, SIP<sup id="cite_ref-47" class="reference"><a href="#cite_note-47">&#91;43&#93;</a></sup>, pyfort<sup id="cite_ref-48" class="reference"><a href="#cite_note-48">&#91;44&#93;</a></sup>), до предоставления более удобных API (boost::python<sup id="cite_ref-49" class="reference"><a href="#cite_note-49">&#91;45&#93;</a></sup><sup id="cite_ref-50" class="reference"><a href="#cite_note-50">&#91;46&#93;</a></sup>, CXX<sup id="cite_ref-51" class="reference"><a href="#cite_note-51">&#91;47&#93;</a></sup>, Pyhrol<sup id="cite_ref-52" class="reference"><a href="#cite_note-52">&#91;48&#93;</a></sup> и др.). Инструмент стандартной библиотеки <a href="/w/index.php?title=Ctypes&amp;action=edit&amp;redlink=1" class="new" title="Ctypes (страница отсутствует)">ctypes</a> позволяет программам Python напрямую обращаться к <a href="/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0" class="mw-redirect" title="Динамическая библиотека">динамическим библиотекам</a>/<a href="/wiki/DLL" class="mw-redirect" title="DLL">DLL</a>, написанным на Си. Существуют модули, позволяющие встраивать код на С/C++ прямо в исходные файлы Python, создавая расширения «на лету» (pyinline<sup id="cite_ref-53" class="reference"><a href="#cite_note-53">&#91;49&#93;</a></sup>, weave<sup id="cite_ref-54" class="reference"><a href="#cite_note-54">&#91;50&#93;</a></sup>).
</p><p>Другой подход состоит во встраивании интерпретатора Python в приложения. Python легко встраивается в программы на Java, C/C++, <a href="/wiki/Ocaml" class="mw-redirect" title="Ocaml">OCaml</a>. Взаимодействие Python-приложений с другими системами возможно также с помощью <a href="/wiki/CORBA" title="CORBA">CORBA</a>, <a href="/wiki/XML-RPC" title="XML-RPC">XML-RPC</a>, <a href="/wiki/SOAP" title="SOAP">SOAP</a>, COM.
</p><p>С помощью проекта <a href="/wiki/Cython" title="Cython">Cython</a> возможна трансляция программ, написанных на языках Python и <a href="/w/index.php?title=Pyrex&amp;action=edit&amp;redlink=1" class="new" title="Pyrex (страница отсутствует)">Pyrex</a><span class="noprint" style="white-space:nowrap;font-size:85%"> (<a href="https://en.wikipedia.org/wiki/Pyrex_(programming_language)" class="extiw" title="en:Pyrex (programming language)"><span title="Версия статьи «Pyrex» на английском языке">англ.</span></a>)</span>, в код на языке Си с последующей компиляцией в машинный код. Cython используется для упрощения написания Python-библиотек, при его использовании отмечается ускорение кода и уменьшение накладных расходов.
</p><p>Экспериментальный проект <a href="/wiki/Shedskin" title="Shedskin">Shedskin</a> предполагает создание компилятора для трансформации неявно типизированных Python-программ в оптимизированный С++ код. Начиная с версии 0.22 Shedskin позволяет компилировать отдельные функции в модули расширений.
</p><p>Python и подавляющее большинство библиотек к нему бесплатны и поставляются в исходных кодах. Более того, в отличие от многих открытых систем, лицензия никак не ограничивает использование Python в коммерческих разработках и не налагает никаких обязательств, кроме указания авторских прав.
</p><p>Одним из каналов распространения и обновления пакетов для Python является <a href="/wiki/PyPI" title="PyPI">PyPI</a> (<a href="/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Английский язык">англ.</a>&#160;<span lang="en" style="font-style:italic;">Python Package Index</span>).
</p>
<h3><span id=".D0.93.D1.80.D0.B0.D1.84.D0.B8.D1.87.D0.B5.D1.81.D0.BA.D0.B8.D0.B5_.D0.B1.D0.B8.D0.B1.D0.BB.D0.B8.D0.BE.D1.82.D0.B5.D0.BA.D0.B8"></span><span class="mw-headline" id="Графические_библиотеки">Графические библиотеки</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=28" class="mw-editsection-visualeditor" title="Редактировать раздел «Графические библиотеки»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=28" title="Редактировать раздел «Графические библиотеки»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>С Python поставляется библиотека <a href="/wiki/Tkinter" title="Tkinter">tkinter</a> на основе <a href="/wiki/Tcl" title="Tcl">Tcl</a>/<a href="/wiki/Tk" title="Tk">Tk</a> для создания кросс-платформенных программ с <a href="/wiki/GUI" class="mw-redirect" title="GUI">графическим интерфейсом</a>.
</p><p>Существуют расширения, позволяющие использовать все основные библиотеки графических интерфейсов&#160;— <a href="/wiki/WxPython" title="WxPython">wxPython</a><sup id="cite_ref-55" class="reference"><a href="#cite_note-55">&#91;51&#93;</a></sup>, основанное на библиотеке <a href="/wiki/WxWidgets" title="WxWidgets">wxWidgets</a>, <a href="/wiki/PyGTK" title="PyGTK">PyGTK</a> для <a href="/wiki/GTK" title="GTK">GTK</a>, <a href="/wiki/PyQt" title="PyQt">PyQt</a> и <a href="/wiki/PySide" title="PySide">PySide</a> для <a href="/wiki/Qt" title="Qt">Qt</a> и другие. Некоторые из них также предоставляют широкие возможности по работе с базами данных, графикой и сетями, используя все возможности библиотеки, на которой основаны.
</p><p>Для создания игр и приложений, требующих нестандартного интерфейса, можно использовать библиотеку <a href="/wiki/Pygame" title="Pygame">Pygame</a>. Она также предоставляет обширные средства работы с <a href="/wiki/%D0%9C%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BC%D0%B5%D0%B4%D0%B8%D0%B0" title="Мультимедиа">мультимедиа</a>: с её помощью можно управлять звуком и изображениями, воспроизводить видео. Предоставляемое pygame аппаратное ускорение графики <a href="/wiki/OpenGL" title="OpenGL">OpenGL</a> имеет более высокоуровневый интерфейс по сравнению с PyOpenGL<sup id="cite_ref-56" class="reference"><a href="#cite_note-56">&#91;52&#93;</a></sup>, копирующей семантику С-библиотеки для OpenGL. Есть также PyOgre<sup id="cite_ref-57" class="reference"><a href="#cite_note-57">&#91;53&#93;</a></sup>, обеспечивающая привязку к <a href="/wiki/Ogre" class="mw-redirect" title="Ogre">Ogre</a>&#160;— высокоуровневой объектно-ориентированной библиотеке 3D-графики. Кроме того, существует библиотека pythonOCC<sup id="cite_ref-58" class="reference"><a href="#cite_note-58">&#91;54&#93;</a></sup>, обеспечивающая привязку к среде 3D-моделирования и симуляции OpenCascade<sup id="cite_ref-59" class="reference"><a href="#cite_note-59">&#91;55&#93;</a></sup>.
</p><p>Для работы с <a href="/wiki/%D0%A0%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B2%D0%B0%D1%8F_%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D0%BA%D0%B0" title="Растровая графика">растровой графикой</a> используется библиотека <a href="/wiki/Python_Imaging_Library" title="Python Imaging Library">Python Imaging Library</a>.
</p><p>Для работы с <a href="/wiki/%D0%92%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F_%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D0%BA%D0%B0" title="Векторная графика">векторной графикой</a> используется <a href="/wiki/Cairo" title="Cairo">PyCairo</a>.
</p>
<h3><span id=".D0.9A.D0.BE.D0.BD.D1.82.D1.80.D0.BE.D0.BB.D1.8C_.D1.82.D0.B8.D0.BF.D0.BE.D0.B2_.D0.B8_.D0.BF.D0.B5.D1.80.D0.B5.D0.B3.D1.80.D1.83.D0.B7.D0.BA.D0.B0_.D1.84.D1.83.D0.BD.D0.BA.D1.86.D0.B8.D0.B9"></span><span class="mw-headline" id="Контроль_типов_и_перегрузка_функций">Контроль типов и перегрузка функций</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=29" class="mw-editsection-visualeditor" title="Редактировать раздел «Контроль типов и перегрузка функций»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=29" title="Редактировать раздел «Контроль типов и перегрузка функций»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Существуют модули, позволяющие контролировать типы параметров функций на этапе исполнения, например, typecheck<sup id="cite_ref-60" class="reference"><a href="#cite_note-60">&#91;56&#93;</a></sup> или method signature checking decorators<sup id="cite_ref-61" class="reference"><a href="#cite_note-61">&#91;57&#93;</a></sup>. Необязательная декларация типов для параметров функции добавлена в Python 3, интерпретатор при этом не проверяет типы, а только добавляет соответствующую информацию к метаданным функции для последующего использования этой информации модулями расширений<sup id="cite_ref-pep-3107_62-0" class="reference"><a href="#cite_note-pep-3107-62">&#91;58&#93;</a></sup>.
</p><p>Перегрузка функций реализована различными сторонними библиотеками, в том числе PEAK<sup id="cite_ref-63" class="reference"><a href="#cite_note-63">&#91;59&#93;</a></sup><sup id="cite_ref-64" class="reference"><a href="#cite_note-64">&#91;60&#93;</a></sup>. Планы, которые не были приняты, по поддержке перегрузки в Python3000<sup id="cite_ref-65" class="reference"><a href="#cite_note-65">&#91;61&#93;</a></sup> были частично реализованы в библиотеке overloading-lib<sup id="cite_ref-66" class="reference"><a href="#cite_note-66">&#91;62&#93;</a></sup>.
</p>
<h2><span id=".D0.9F.D1.80.D0.B8.D0.BC.D0.B5.D1.80.D1.8B_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC"></span><span class="mw-headline" id="Примеры_программ">Примеры программ</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=30" class="mw-editsection-visualeditor" title="Редактировать раздел «Примеры программ»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=30" title="Редактировать раздел «Примеры программ»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>В статье «<a href="https://ru.wikiversity.org/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC_%D0%BD%D0%B0_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B5_Python" class="extiw" title="v:Примеры программ на языке Python">Примеры программ на языке Python</a>» собраны примеры небольших программ, демонстрирующих некоторые возможности языка Python и его стандартной библиотеки.
</p>
<h2><span id=".D0.9F.D1.80.D0.BE.D1.84.D0.B8.D0.BB.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.B8.D0.B5_.D0.B8_.D0.BE.D0.BF.D1.82.D0.B8.D0.BC.D0.B8.D0.B7.D0.B0.D1.86.D0.B8.D1.8F_.D0.BA.D0.BE.D0.B4.D0.B0"></span><span class="mw-headline" id="Профилирование_и_оптимизация_кода">Профилирование и оптимизация кода</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=31" class="mw-editsection-visualeditor" title="Редактировать раздел «Профилирование и оптимизация кода»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=31" title="Редактировать раздел «Профилирование и оптимизация кода»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>В стандартной библиотеке Python имеется <a href="/wiki/%D0%9F%D1%80%D0%BE%D1%84%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Профилирование (информатика)">профайлер</a> (модуль <code>profile</code>), который можно использовать для сбора статистики о времени работы отдельных функций. Для решения вопроса о том, какой вариант кода работает быстрее, можно использовать модуль <code>timeit</code>. Производимые в следующей программе измерения позволяют выяснить, какой из вариантов <a href="/wiki/%D0%9A%D0%BE%D0%BD%D0%BA%D0%B0%D1%82%D0%B5%D0%BD%D0%B0%D1%86%D0%B8%D1%8F" title="Конкатенация">конкатенации</a> строк более эффективен:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">Timer</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="s2">&quot;Python 3.2.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32.&quot;</span>

<span class="k">def</span> <span class="nf">case1</span><span class="p">():</span> <span class="c1"># А. инкрементальные конкатенации в цикле</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">tmp</span>

<span class="k">def</span> <span class="nf">case2</span><span class="p">():</span> <span class="c1"># Б. через промежуточный список и метод join</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
        <span class="n">s</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">case3</span><span class="p">():</span> <span class="c1"># В. списковое выражение и метод join</span>
    <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">tmp</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">)])</span>

<span class="k">def</span> <span class="nf">case4</span><span class="p">():</span> <span class="c1"># Г. генераторное выражение и метод join</span>
    <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmp</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">))</span>

<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">):</span>
    <span class="nb">print</span> <span class="p">(</span><span class="n">Timer</span><span class="p">(</span><span class="s2">&quot;func()&quot;</span><span class="p">,</span><span class="s2">&quot;from __main__ import case</span><span class="si">%s</span><span class="s2"> as func&quot;</span> <span class="o">%</span> <span class="n">v</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">200</span><span class="p">))</span>
</pre></div>
<p>Как и в любом языке программирования, в Python имеются свои приёмы <a href="/wiki/%D0%9E%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Оптимизация (информатика)">оптимизации</a> кода. Оптимизировать код можно исходя из различных (часто конкурирующих друг с другом) критериев (увеличение быстродействия, уменьшение объёма требуемой оперативной памяти, компактность исходного кода и&#160;т.&#160;д.). Чаще всего программы оптимизируют по времени исполнения.
</p><p>Здесь есть несколько очевидных правил.
</p>
<ul><li>Не нужно оптимизировать программу, если скорость её выполнения достаточна.</li>
<li>Используемый алгоритм имеет определённую <a href="/wiki/%D0%92%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%BB%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D0%B0" title="Временная сложность алгоритма">временную сложность</a>, поэтому перед оптимизацией кода программы стоит сначала пересмотреть алгоритм.</li>
<li>Стоит использовать готовые и отлаженные функции и модули, даже если для этого нужно немного обработать данные. Например, в Python есть встроенная функция <code>sort()</code>.</li>
<li><a href="/wiki/%D0%9F%D1%80%D0%BE%D1%84%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Профилирование (информатика)">Профилирование</a> поможет выяснить узкие места. Оптимизацию нужно начинать с них.</li></ul>
<p>Python имеет следующие особенности и связанные с ними правила оптимизации.
</p>
<ul><li>Вызов функций является достаточно дорогостоящей операцией, поэтому внутри вложенных циклов нужно стараться избегать вызова функций или, например, переносить цикл в функции. Функция, обрабатывающая последовательность, эффективнее, чем обработка той же последовательности в цикле вызовом функции.</li>
<li>Старайтесь вынести из глубоко вложенного цикла всё, что можно вычислить во внешних циклах. Доступ к локальным переменным более быстрый, чем к глобальным или чем доступ к полям.</li>
<li>Оптимизатор <b>psyco</b> может помочь ускорить работу модуля программы при условии, что модуль не использует динамических свойств языка Python.</li>
<li>В случае, если модуль проводит массированную обработку данных и оптимизация алгоритма и кода не помогает, можно переписать <a href="/wiki/%D0%9A%D1%80%D0%B8%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%83%D1%87%D0%B0%D1%81%D1%82%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B4%D0%B0" class="mw-redirect" title="Критический участок кода">критические участки</a>, скажем, на языке Си или Pyrex.</li></ul>
<p>Инструмент под названием Pychecker<sup id="cite_ref-67" class="reference"><a href="#cite_note-67">&#91;63&#93;</a></sup> поможет проанализировать исходный код на Python и выдать рекомендации по найденным проблемам (например, неиспользуемые имена, изменение сигнатуры метода при его перегрузке и&#160;т.&#160;п.). В ходе такого статического анализа исходного кода могут быть выявлены и ошибки. Pylint<sup id="cite_ref-68" class="reference"><a href="#cite_note-68">&#91;64&#93;</a></sup> призван решать близкие задачи, но имеет уклон в сторону проверки стиля кода, поиска <a href="/wiki/%D0%9A%D0%BE%D0%B4_%D1%81_%D0%B7%D0%B0%D0%BF%D0%B0%D1%88%D0%BA%D0%BE%D0%BC" title="Код с запашком">кода с запашком</a><sup id="cite_ref-69" class="reference"><a href="#cite_note-69">&#91;65&#93;</a></sup>.
</p>
<h2><span id=".D0.A1.D1.80.D0.B0.D0.B2.D0.BD.D0.B5.D0.BD.D0.B8.D0.B5_.D1.81_.D0.B4.D1.80.D1.83.D0.B3.D0.B8.D0.BC.D0.B8_.D1.8F.D0.B7.D1.8B.D0.BA.D0.B0.D0.BC.D0.B8"></span><span class="mw-headline" id="Сравнение_с_другими_языками">Сравнение с другими языками</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=32" class="mw-editsection-visualeditor" title="Редактировать раздел «Сравнение с другими языками»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=32" title="Редактировать раздел «Сравнение с другими языками»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Появившись сравнительно поздно, Python создавался под влиянием множества языков программирования:
</p>
<ul><li><a href="/wiki/ABC_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="ABC (язык программирования)">ABC</a>&#160;— отступы для группировки операторов, высокоуровневые структуры данных (map)<sup id="cite_ref-foreword_70-0" class="reference"><a href="#cite_note-foreword-70">&#91;66&#93;</a></sup><sup id="cite_ref-71" class="reference"><a href="#cite_note-71">&#91;67&#93;</a></sup> (Python фактически создавался как попытка исправить ошибки, допущенные при проектировании ABC);</li>
<li><a href="/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D0%B0-3" title="Модула-3">Modula-3</a>&#160;— пакеты, модули, использование <code>else</code> совместно с <code>try</code> и <code>except</code>, именованные аргументы функций (на это также повлиял <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>);</li>
<li><a href="/wiki/%D0%A1_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" class="mw-redirect" title="С (язык программирования)">С</a>, <a href="/wiki/C%2B%2B" title="C++">C++</a>&#160;— некоторые синтаксические конструкции (как пишет сам <a href="/wiki/%D0%93%D0%B2%D0%B8%D0%B4%D0%BE_%D0%B2%D0%B0%D0%BD_%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC" class="mw-redirect" title="Гвидо ван Россум">Гвидо ван Россум</a>&#160;— он использовал наиболее непротиворечивые конструкции из С, чтобы не вызвать неприязнь у С-программистов к Python<sup id="cite_ref-foreword_70-1" class="reference"><a href="#cite_note-foreword-70">&#91;66&#93;</a></sup>);</li>
<li><a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>&#160;— объектно-ориентированное программирование;</li>
<li><a href="/wiki/Lisp" class="mw-redirect" title="Lisp">Lisp</a>, в частности, <a href="/wiki/Scheme" title="Scheme">Scheme</a>&#160;— отдельные черты <a href="/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Функциональное программирование">функционального программирования</a> (<code lang="python">lambda, map, reduce, filter</code> и другие);</li>
<li><a href="/wiki/Fortran" class="mw-redirect" title="Fortran">Fortran</a>&#160;— срезы массивов, комплексная арифметика;</li>
<li><a href="/wiki/%D0%9C%D0%B8%D1%80%D0%B0%D0%BD%D0%B4%D0%B0_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Миранда (язык программирования)">Miranda</a>&#160;— <a href="/w/index.php?title=%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BD%D0%B0_%D0%9F%D0%B8%D1%82%D0%BE%D0%BD%D0%B5&amp;action=edit&amp;redlink=1" class="new" title="Функциональное программирование на Питоне (страница отсутствует)">списочные выражения</a>;</li>
<li><a href="/wiki/Java" title="Java">Java</a>&#160;— модули <code>logging</code>, <code>unittest</code>, <code>threading</code> (часть возможностей оригинального модуля не реализована), xml.sax стандартной библиотеки, совместное использование <code>finally</code> и <code>except</code> при обработке исключений, использование <code>@</code> для <a href="#Декораторы">декораторов</a>;</li>
<li><a href="/wiki/Icon_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Icon (язык программирования)">Icon</a>&#160;— <a href="/wiki/Python#Генераторы" title="Python">генераторы</a>.</li></ul>
<p>Большая часть других возможностей Python (например, байт-компиляция исходного кода) также была реализована ранее в других языках.
</p><p>Наиболее часто Python сравнивают с <a href="/wiki/Perl" title="Perl">Perl</a> и <a href="/wiki/Ruby" title="Ruby">Ruby</a>. Эти языки также являются <a href="/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B8%D1%80%D1%83%D0%B5%D0%BC%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Интерпретируемый язык программирования">интерпретируемыми</a> и обладают примерно одинаковой скоростью выполнения программ. Как и Perl, Python может успешно применяться для написания скриптов (сценариев).
</p><p>Как и Ruby, Python является хорошо продуманной системой для <a href="/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Объектно-ориентированное программирование">ООП</a>. При этом реализация ООП в Python отличается от многих других объектно-ориентированных языков. В частности:
</p>
<ul><li>В отличие от Ruby, Python не придерживается идеологии «всё&#160;— объект», и поддерживает встроенные примитивные типы, не входящие в иерархию классов. Такое решение упрощает и делает более технически эффективным межъязыковое взаимодействие, хотя может быть сочтено неудобным фанатами объектного подхода.</li>
<li>В отличие от некоторых ООЯП (<a href="/wiki/Java" title="Java">Java</a>, <a href="/wiki/Object_Pascal" title="Object Pascal">Object Pascal</a>, <a href="/wiki/Ruby" title="Ruby">Ruby</a>, …) в Python нет реального общего базового класса, от которого все объекты наследуют общие методы. Хотя формально новый класс в Python наследует (прямо или косвенно) тип <code>object</code>, это является только синтаксическим приёмом, так как методы, которые являются общими для всех объектов&#160;— <code>id, type, isinstance, issubclass, str, repr, getattr, …</code> не наследуются от object, а реализованы в виде глобальных функций. Такое решение приводит к тому, что изменение поведения этих методов производится не перегрузкой, а определением специальных методов класса.</li></ul>
<p>В среде коммерческих приложений скорость выполнения программ на Python часто сравнивают с <a href="/wiki/Java" title="Java">Java</a>-приложениями<sup id="cite_ref-72" class="reference"><a href="#cite_note-72">&#91;68&#93;</a></sup>.
</p>
<h2><span id=".D0.9D.D0.B5.D0.B4.D0.BE.D1.81.D1.82.D0.B0.D1.82.D0.BA.D0.B8"></span><span class="mw-headline" id="Недостатки">Недостатки</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=33" class="mw-editsection-visualeditor" title="Редактировать раздел «Недостатки»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=33" title="Редактировать раздел «Недостатки»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span id=".D0.A1.D0.B8.D0.BD.D1.82.D0.B0.D0.BA.D1.81.D0.B8.D1.81_.D0.B8_.D1.81.D0.B5.D0.BC.D0.B0.D0.BD.D1.82.D0.B8.D0.BA.D0.B0_2"></span><span class="mw-headline" id="Синтаксис_и_семантика_2">Синтаксис и семантика</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=34" class="mw-editsection-visualeditor" title="Редактировать раздел «Синтаксис и семантика»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=34" title="Редактировать раздел «Синтаксис и семантика»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Несмотря на то, что одним из заявленных принципов дизайна Python является <a href="/wiki/%D0%9F%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D0%BE_%D0%BD%D0%B0%D0%B8%D0%BC%D0%B5%D0%BD%D1%8C%D1%88%D0%B5%D0%B3%D0%BE_%D1%83%D0%B4%D0%B8%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F" title="Правило наименьшего удивления">принцип наименьшего удивления</a>, критики отмечают целый ряд архитектурных решений, которые могут вводить в заблуждение или вызывать недоумение у программистов, привыкших к другим распространённым языкам.<sup id="cite_ref-pitfalls_73-0" class="reference"><a href="#cite_note-pitfalls-73">&#91;69&#93;</a></sup>. В их числе:
</p>
<ul><li>Различная семантика присваивания для значений встроенных типов и объектов: для первых копируется значение, для вторых&#160;— копируется ссылка на тот же объект.</li>
<li>Отличие в поведении на некоторых типах «сокращённых» операторов, таких как <code>+=</code> и их развёрнутой записи, хотя в большинстве языков «сокращённый» вариант&#160;— это просто краткая запись полного, и семантически они абсолютно эквивалентны.</li>
<li>Жёсткая трактовка лексической области видимости, подобная используемой в JavaScript: даже если переменная получает значение в последней строке функции, её областью видимости является вся функция.</li>
<li>Путаница между полями класса и полями объекта.</li>
<li>Интуитивно трудно предсказуемое поведение параметров со значением-объектом по умолчанию. Если в качестве инициализатора для параметра по умолчанию указать конструктор объекта, это приведёт к созданию статического объекта, ссылка на который и будет передаваться по умолчанию в каждый вызов<sup id="cite_ref-74" class="reference"><a href="#cite_note-74">&#91;70&#93;</a></sup>. Это может повлечь трудно уловимые ошибки.</li></ul>
<h3><span id=".D0.9D.D0.B8.D0.B7.D0.BA.D0.BE.D0.B5_.D0.B1.D1.8B.D1.81.D1.82.D1.80.D0.BE.D0.B4.D0.B5.D0.B9.D1.81.D1.82.D0.B2.D0.B8.D0.B5"></span><span class="mw-headline" id="Низкое_быстродействие">Низкое быстродействие</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=35" class="mw-editsection-visualeditor" title="Редактировать раздел «Низкое быстродействие»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=35" title="Редактировать раздел «Низкое быстродействие»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Классический Python имеет общий со многими другими <a href="/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B8%D1%80%D1%83%D0%B5%D0%BC%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Интерпретируемый язык программирования">интерпретируемыми языками</a> недостаток&#160;— сравнительно невысокую скорость выполнения программ<sup id="cite_ref-alioth-benchmark_75-0" class="reference"><a href="#cite_note-alioth-benchmark-75">&#91;71&#93;</a></sup>. В некоторой степени ситуацию улучшает сохранение <a href="/wiki/%D0%91%D0%B0%D0%B9%D1%82-%D0%BA%D0%BE%D0%B4" title="Байт-код">байт-кода</a> (расширения <code>.pyc</code> и, до версии 3.5, <code>.pyo</code>), которое позволяет интерпретатору не тратить время на синтаксический разбор текста модулей при каждом запуске.
</p><p>Существуют реализации языка Python, вводящие высокопроизводительные виртуальные машины (ВМ) в качестве бэк-энда компилятора. Примерами таких реализаций может служить <a href="/wiki/PyPy" title="PyPy">PyPy</a>, базирующийся на RPython; более ранней инициативой является проект <a href="/wiki/Parrot" title="Parrot">Parrot</a>. Ожидается, что использование ВМ типа LLVM приведёт к тем же результатам, что и использование аналогичных подходов для реализаций языка Java, где низкая вычислительная производительность в основном преодолена<sup id="cite_ref-unladen-swallow_76-0" class="reference"><a href="#cite_note-unladen-swallow-76">&#91;72&#93;</a></sup>. Однако нельзя забывать, что динамический характер Python делает неизбежными дополнительные накладные расходы при исполнении программ, что ограничивает производительность Python-систем независимо от применяемых технологий. Вследствие этого для написания критических участков кода используются низкоуровневые языки, интеграция с которыми обеспечивается множеством программ и библиотек (см. выше).
</p><p>В самой популярной реализации языка Python интерпретатор довольно велик и более требователен к ресурсам, чем в аналогичных популярных реализациях <a href="/wiki/Tcl" title="Tcl">Tcl</a>, <a href="/wiki/Forth" class="mw-redirect" title="Forth">Forth</a>, <a href="/wiki/LISP" class="mw-redirect" title="LISP">LISP</a> или <a href="/wiki/Lua" title="Lua">Lua</a>, что ограничивает его применение во встроенных системах. Тем не менее, Python нашёл применение в <a href="/wiki/%D0%9A%D0%B0%D1%80%D0%BC%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D0%BF%D0%B5%D1%80%D1%81%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%BC%D0%BF%D1%8C%D1%8E%D1%82%D0%B5%D1%80" title="Карманный персональный компьютер">КПК</a> и некоторых моделях мобильных телефонов<sup id="cite_ref-PyS60_77-0" class="reference"><a href="#cite_note-PyS60-77">&#91;73&#93;</a></sup>.
</p>
<h3><span id=".D0.9D.D0.B5.D0.B2.D0.BE.D0.B7.D0.BC.D0.BE.D0.B6.D0.BD.D0.BE.D1.81.D1.82.D1.8C_.D0.BC.D0.BE.D0.B4.D0.B8.D1.84.D0.B8.D0.BA.D0.B0.D1.86.D0.B8.D0.B8_.D0.B2.D1.81.D1.82.D1.80.D0.BE.D0.B5.D0.BD.D0.BD.D1.8B.D1.85_.D0.BA.D0.BB.D0.B0.D1.81.D1.81.D0.BE.D0.B2"></span><span class="mw-headline" id="Невозможность_модификации_встроенных_классов">Невозможность модификации встроенных классов</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=36" class="mw-editsection-visualeditor" title="Редактировать раздел «Невозможность модификации встроенных классов»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=36" title="Редактировать раздел «Невозможность модификации встроенных классов»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>По сравнению с <a href="/wiki/Ruby" title="Ruby">Ruby</a> и некоторыми другими языками, в Python отсутствует возможность модифицировать встроенные классы, такие, как <code>int, str, float, list</code> и другие, что, однако, позволяет Python потреблять меньше оперативной памяти и быстрее работать. Ещё одной причиной введения такого ограничения является необходимость согласования с модулями расширения. Многие модули (в целях оптимизации быстродействия) преобразуют Python-объекты элементарных типов к соответствующим Си-типам вместо манипуляций с ними посредством Си-API. Также это избавляет от многих потенциальных ошибок при неконтролируемом динамическом переопределении встроенных типов.
</p>
<h3><span id=".D0.93.D0.BB.D0.BE.D0.B1.D0.B0.D0.BB.D1.8C.D0.BD.D0.B0.D1.8F_.D0.B1.D0.BB.D0.BE.D0.BA.D0.B8.D1.80.D0.BE.D0.B2.D0.BA.D0.B0_.D0.B8.D0.BD.D1.82.D0.B5.D1.80.D0.BF.D1.80.D0.B5.D1.82.D0.B0.D1.82.D0.BE.D1.80.D0.B0_.28GIL.29"></span><span class="mw-headline" id="Глобальная_блокировка_интерпретатора_(GIL)">Глобальная блокировка интерпретатора (GIL)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=37" class="mw-editsection-visualeditor" title="Редактировать раздел «Глобальная блокировка интерпретатора (GIL)»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=37" title="Редактировать раздел «Глобальная блокировка интерпретатора (GIL)»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="hatnote">Основная статья: <b><a href="/wiki/Global_Interpreter_Lock" title="Global Interpreter Lock">Global Interpreter Lock</a></b></div>
<p>Интерпретатор Python в <a href="/wiki/CPython" title="CPython">CPython</a>, <a href="/wiki/Stackless_Python" title="Stackless Python">Stackless</a> и <a href="/wiki/PyPy" title="PyPy">PyPy</a> использует потоко-небезопасные данные, во избежание разрушения которых при совместной модификации из разных потоков применяется глобальная блокировка интерпретатора&#160;— GIL (Global Interpreter Lock): в ходе исполнения кода поток интерпретатора блокирует GIL, выполняет некоторое количество инструкций (по умолчанию 100), после чего освобождает блокировку и приостанавливается, давая возможность работать другим потокам. GIL также освобождается во время ввода-вывода, изменения и проверки состояния синхронизирующих примитивов, при исполнении кода расширений, не обращающихся к данным интерпретатора, например, <a href="/wiki/NumPy" title="NumPy">NumPy</a>/<a href="/wiki/SciPy" title="SciPy">SciPy</a>. Таким образом, в каждый момент времени в одном процессе интерпретатора Python может исполняться только один поток кода на Python, независимо от числа доступных процессорных ядер.
</p><p>Потери производительности от GIL зависят от характера программ и архитектуры системы. Большинство программ является однопоточными, либо запускает всего несколько потоков, из которых часть в каждый конкретный момент простаивает в ожидании. Персональные компьютеры обычно имеют небольшое количество процессорных ядер, которые загружены параллельно исполняющимися в системе процессами, так что реальные потери производительности на персональных компьютерах из-за GIL невелики. Но в серверных приложениях может быть удобно использовать десятки и сотни (а то и больше) параллельных потоков (например, в системах массового обслуживания, где каждый поток обрабатывает данные для отдельного пользовательского запроса), а серверы на конец 2010-х годов нередко имеют десятки и даже сотни процессорных ядер, то есть технически могут обеспечить этим потокам физически одновременное исполнение; в таких условиях GIL может приводить к действительно значительному снижению общей производительности, так как лишает программу возможности полноценно использовать ресурсы многоядерных систем.
</p><p>Ведётся работа по оптимизации GIL<sup id="cite_ref-78" class="reference"><a href="#cite_note-78">&#91;74&#93;</a></sup><sup id="cite_ref-79" class="reference"><a href="#cite_note-79">&#91;75&#93;</a></sup>. Отказ от GIL в ближайшем будущем не планируется, так как альтернативные механизмы на однопоточных приложениях, которых большинство, работают медленнее или потребляют больше ресурсов:
</p>
<ul><li>Вариант интерпретатора с синхронизацией доступа к отдельным объектам вместо глобальной блокировки<sup id="cite_ref-80" class="reference"><a href="#cite_note-80">&#91;76&#93;</a></sup> из-за частых захватов/освобождений блокировок оказался слишком медленным.</li>
<li>python-safethread&#160;— CPython без GIL,<sup id="cite_ref-google-safethread_81-0" class="reference"><a href="#cite_note-google-safethread-81">&#91;77&#93;</a></sup> по утверждениям авторов, обеспечивает на однопоточных приложениях скорость порядка 60-65&#160;% от скорости CPython.</li>
<li>Реализация потоков через процессы ОС, например, модуль processing<sup id="cite_ref-82" class="reference"><a href="#cite_note-82">&#91;78&#93;</a></sup> (с версии 2.6 переименован в multiprocessing). В UNIX-подобных системах накладные расходы при порождении процесса невелики, но в Windows использование процессов вместо потоков ведёт к существенному увеличению расхода оперативной памяти.</li>
<li>Отказ от совместного использования изменяемых данных и вызовов внешнего кода. При этом данные дублируются в потоках и их синхронизация (если таковая нужна) лежит на программисте<sup id="cite_ref-83" class="reference"><a href="#cite_note-83">&#91;79&#93;</a></sup>. Этот подход также увеличивает потребление оперативной памяти, хотя и не настолько сильно, как при использовании процессов в Windows.</li>
<li>Библиотеки, обеспечивающие собственную организацию поддержки потоков, такие как parallelpython<sup id="cite_ref-84" class="reference"><a href="#cite_note-84">&#91;80&#93;</a></sup>, pympi<sup id="cite_ref-85" class="reference"><a href="#cite_note-85">&#91;81&#93;</a></sup> и другие.</li></ul>
<p>Радикальным вариантом решения проблемы может быть переход на <a href="/wiki/Jython" title="Jython">Jython</a> и <a href="/wiki/IronPython" title="IronPython">IronPython</a>, работающие на виртуальных машинах Java и .NET/Мono: эти реализации вообще не используют GIL.
</p>
<h2><span id=".D0.A0.D0.B5.D0.B0.D0.BB.D0.B8.D0.B7.D0.B0.D1.86.D0.B8.D0.B8"></span><span class="mw-headline" id="Реализации">Реализации</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=38" class="mw-editsection-visualeditor" title="Редактировать раздел «Реализации»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=38" title="Редактировать раздел «Реализации»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p><a href="/wiki/CPython" title="CPython">CPython</a> является основной, но не единственной реализацией языка программирования Python. Существуют также другие реализации.
</p>
<ul><li><a href="/wiki/PyPy" title="PyPy">PyPy</a>&#160;— реализация Python, написанная на <a href="/wiki/RPython" class="mw-redirect" title="RPython">RPython</a> (подмножество Python, имеющее намного меньше динамических возможностей). Позволяет легко проверять новые возможности. В PyPy, кроме стандартного CPython, включены возможности Stackless, <a href="/wiki/Psyco" title="Psyco">Psyco</a>, модификация <a href="/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D0%BE%D0%B5_%D1%81%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE" title="Абстрактное синтаксическое дерево">AST</a> «на лету» и многое другое. В проект интегрированы возможности анализа Python-кода и трансляция в другие языки и <a href="/wiki/%D0%91%D0%B0%D0%B9%D1%82%D0%BA%D0%BE%D0%B4" class="mw-redirect" title="Байткод">байткоды</a> виртуальных машин (<a href="/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Си (язык программирования)">Си</a>, <a href="/wiki/LLVM" title="LLVM">LLVM</a>, <a href="/wiki/Javascript" class="mw-redirect" title="Javascript">Javascript</a>, .NET с версии 0.9.9). Начиная с 0.9.0, возможна полностью автоматическая трансляция RPython в Си, в результате чего достигается скорость, приемлемая для использования (в 2—3 раза ниже, чем CPython при отключённом <a href="/wiki/JIT" class="mw-redirect" title="JIT">JIT</a> для версии 0.9.9). По умолчанию PyPy поставляется со встроенным JIT-компилятором, с помощью которого он способен работать намного быстрее, чем CPython.</li>
<li><span class="iw plainlinks" data-title="Numba" data-lang="en" data-lang-name="англ."><a href="/w/index.php?title=Numba&amp;action=edit&amp;redlink=1" class="new" title="Numba (страница отсутствует)">Numba</a><sup class="iw&#95;_note noprint" style="font-style:normal; font-weight:normal;"><a href="https://en.wikipedia.org/wiki/Numba" class="extiw" title="en:Numba"><span class="iw&#95;_tooltip" title="Версия статьи «Numba» на английском языке">[en]</span></a></sup></span>&#160;— Jit-компилятор на основе LLVM с поддержкой NumPy.</li>
<li><a href="/w/index.php?title=Python_for_S60&amp;action=edit&amp;redlink=1" class="new" title="Python for S60 (страница отсутствует)">PyS60</a><sup id="cite_ref-PyS60_77-1" class="reference"><a href="#cite_note-PyS60-77">&#91;73&#93;</a></sup>&#160;— реализация языка для <a href="/wiki/%D0%A1%D0%BC%D0%B0%D1%80%D1%82%D1%84%D0%BE%D0%BD" title="Смартфон">смартфонов</a> фирмы <a href="/wiki/Nokia" title="Nokia">Nokia</a> на платформе <a href="/wiki/Symbian_S60" title="Symbian S60">Series 60</a>.</li>
<li><a href="/wiki/IronPython" title="IronPython">IronPython</a>&#160;— Python для <a href="/wiki/.NET_Framework" title=".NET Framework">.NET Framework</a> и <a href="/wiki/Mono" title="Mono">Mono</a>. Компилирует Python программы в <a href="/wiki/MSIL" class="mw-redirect" title="MSIL">MSIL</a>, таким образом предоставляя полную интеграцию с .NET-системой<sup id="cite_ref-86" class="reference"><a href="#cite_note-86">&#91;82&#93;</a></sup>.</li>
<li><a href="/wiki/Stackless_Python" title="Stackless Python">Stackless</a>&#160;— также написанная на Си реализация Python. Это не полноценная реализация, а <a href="/wiki/%D0%9F%D0%B0%D1%82%D1%87" title="Патч">патчи</a> к CPython. Предоставляет расширенные возможности многопоточного программирования и значительно большую глубину <a href="/wiki/%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F" title="Рекурсия">рекурсии</a>.</li>
<li><a href="/w/index.php?title=Python_for_.NET&amp;action=edit&amp;redlink=1" class="new" title="Python for .NET (страница отсутствует)">Python for .NET</a><sup id="cite_ref-87" class="reference"><a href="#cite_note-87">&#91;83&#93;</a></sup>&#160;— ещё одна реализация Python для .NET. В отличие от IronPython эта реализация не компилирует Python код в MSIL, а только предоставляет интерпретатор, написанный на <a href="/wiki/C_Sharp" title="C Sharp">C#</a>. Позволяет использовать .NET-сборки из Python кода.</li>
<li><a href="/wiki/Jython" title="Jython">Jython</a>&#160;— реализация Python, использующая <a href="/wiki/JVM" class="mw-redirect" title="JVM">JVM</a> в качестве среды исполнения. Позволяет прозрачно использовать <a href="/wiki/Java" title="Java">Java</a>-библиотеки<sup id="cite_ref-88" class="reference"><a href="#cite_note-88">&#91;84&#93;</a></sup>.</li>
<li><a href="/w/index.php?title=Python-safethread&amp;action=edit&amp;redlink=1" class="new" title="Python-safethread (страница отсутствует)">python-safethread</a><sup id="cite_ref-google-safethread_81-1" class="reference"><a href="#cite_note-google-safethread-81">&#91;77&#93;</a></sup>&#160;— версия CPython без <a href="#Глобальная_блокировка_интерпретатора_(GIL)">GIL</a>, что позволяет одновременно исполнять Python потоки на всех доступных процессорах. Внесены также некоторые другие изменения.</li>
<li><a href="/wiki/Unladen_Swallow" title="Unladen Swallow">Unladen Swallow</a>&#160;— начатый <a href="/wiki/Google_(%D0%BA%D0%BE%D0%BC%D0%BF%D0%B0%D0%BD%D0%B8%D1%8F)" title="Google (компания)">Google</a> проект по разработке высокоэффективного, максимально совместимого с CPython JIT-компилятора на базе <a href="/wiki/LLVM" title="LLVM">LLVM</a>. Согласно планам по развитию Python<sup id="cite_ref-89" class="reference"><a href="#cite_note-89">&#91;85&#93;</a></sup>, планировалось перенести исходный код Unladen Swallow в CPython в версии 3.3. Но PEP-3146 был отменён в связи с отсутствием интереса к Unladen Swallow со стороны Google, основного спонсора разработки<sup id="cite_ref-90" class="reference"><a href="#cite_note-90">&#91;86&#93;</a></sup>.</li>
<li><a href="/w/index.php?title=Tinypy&amp;action=edit&amp;redlink=1" class="new" title="Tinypy (страница отсутствует)">tinypy</a><sup id="cite_ref-91" class="reference"><a href="#cite_note-91">&#91;87&#93;</a></sup>&#160;— минималистическая версия Python. Часть возможностей CPython не реализована.</li>
<li>MicroPython&#160;— реализация Python 3 для встроенных систем с малым объёмом оперативной памяти<sup id="cite_ref-92" class="reference"><a href="#cite_note-92">&#91;88&#93;</a></sup>.</li>
<li><a href="/w/index.php?title=Python_for_S60&amp;action=edit&amp;redlink=1" class="new" title="Python for S60 (страница отсутствует)">Brython</a><sup id="cite_ref-93" class="reference"><a href="#cite_note-93">&#91;89&#93;</a></sup>&#160;— реализация языка на клиентском JavaScript, позволяющая писать браузерные скрипты на Python 3.</li>
<li><a href="/w/index.php?title=QPython&amp;action=edit&amp;redlink=1" class="new" title="QPython (страница отсутствует)">QPython</a><sup id="cite_ref-94" class="reference"><a href="#cite_note-94">&#91;90&#93;</a></sup>&#160;— реализация python для Android. Проект всё ещё на стадии тестирования, однако на qpython уже портированы некоторые самые необходимые библиотеки. Позволяет и работать в интерактивном режиме. Существует также Qpython3.</li></ul>
<h2><span id=".D0.94.D0.B0.D0.BB.D1.8C.D0.BD.D0.B5.D0.B9.D1.88.D0.B0.D1.8F_.D1.80.D0.B0.D0.B7.D1.80.D0.B0.D0.B1.D0.BE.D1.82.D0.BA.D0.B0"></span><span class="mw-headline" id="Дальнейшая_разработка">Дальнейшая разработка</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=39" class="mw-editsection-visualeditor" title="Редактировать раздел «Дальнейшая разработка»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=39" title="Редактировать раздел «Дальнейшая разработка»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p><a href="/w/index.php?title=Python_Enhancement_Proposal&amp;action=edit&amp;redlink=1" class="new" title="Python Enhancement Proposal (страница отсутствует)">Python Enhancement Proposal</a> («PEP»)&#160;— это документ со стандартизированным дизайном, предоставляющий общую информацию о языке Python, включая новые предложения, описания и разъяснения возможностей языка. PEP предлагаются как основной источник для предложения новых возможностей и для разъяснения выбора того или иного дизайна для всех основных элементов языка. Выдающиеся PEP рецензируются и комментируются <a href="/wiki/%D0%93%D0%B2%D0%B8%D0%B4%D0%BE_%D0%B2%D0%B0%D0%BD_%D0%A0%D0%BE%D1%81%D1%81%D1%83%D0%BC" class="mw-redirect" title="Гвидо ван Россум">Гвидо ван Россумом</a>, имеющим в проекте статус «<a href="/wiki/%D0%92%D0%B5%D0%BB%D0%B8%D0%BA%D0%BE%D0%B4%D1%83%D1%88%D0%BD%D1%8B%D0%B9_%D0%BF%D0%BE%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9_%D0%B4%D0%B8%D0%BA%D1%82%D0%B0%D1%82%D0%BE%D1%80" title="Великодушный пожизненный диктатор">великодушного пожизненного диктатора</a>». 12 июля 2018 года Гвидо ван Россум отправил себя в бессрочный отпуск с должности «великодушного пожизненного диктатора»<sup id="cite_ref-95" class="reference"><a href="#cite_note-95">&#91;91&#93;</a></sup><sup id="cite_ref-96" class="reference"><a href="#cite_note-96">&#91;92&#93;</a></sup>.
</p>
<h3><span id=".D0.93.D1.80.D0.B0.D1.84.D0.B8.D0.BA_.D0.B8_.D1.81.D0.BE.D0.B2.D0.BC.D0.B5.D1.81.D1.82.D0.B8.D0.BC.D0.BE.D1.81.D1.82.D1.8C"></span><span class="mw-headline" id="График_и_совместимость">График и совместимость</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=40" class="mw-editsection-visualeditor" title="Редактировать раздел «График и совместимость»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=40" title="Редактировать раздел «График и совместимость»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Серии Python 2.x и Python 3.x в течение нескольких выпусков будут существовать параллельно, при этом серия 2.x будет использоваться для совместимости и скорее всего в неё будут включены некоторые возможности серии 3.x. PEP 3000 содержит больше информации о планируемых выпусках.
</p><p>Python 3.0 обратно не совместим с предыдущей серией 2.x. Код Python 2.x часто будет выдавать ошибки при исполнении в Python 3.0. Динамическая типизация Python вместе с планами изменения нескольких методов словарей делает механический перевод из Python 2.x в Python 3.0 очень сложным. Однако утилита «2to3» уже способна сделать большинство работы по переводу кода, указывая на подозрительные его части с помощью комментариев и предупреждений. PEP 3000 рекомендует держать исходный код для серии 2.x и делать выпуски для Python 3.x с помощью «2to3». Полученный код не следует редактировать, пока программа не будет работоспособной в Python 2.x.
</p>
<h3><span id=".D0.92.D0.BE.D0.B7.D0.BC.D0.BE.D0.B6.D0.BD.D0.BE.D1.81.D1.82.D0.B8_2"></span><span class="mw-headline" id="Возможности_2">Возможности</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=41" class="mw-editsection-visualeditor" title="Редактировать раздел «Возможности»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=41" title="Редактировать раздел «Возможности»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Основные изменения, внесённые в версии 3.0<sup id="cite_ref-97" class="reference"><a href="#cite_note-97">&#91;93&#93;</a></sup><sup id="cite_ref-98" class="reference"><a href="#cite_note-98">&#91;94&#93;</a></sup><sup id="cite_ref-99" class="reference"><a href="#cite_note-99">&#91;95&#93;</a></sup><sup id="cite_ref-100" class="reference"><a href="#cite_note-100">&#91;96&#93;</a></sup>:
</p>
<ul><li>Синтаксическая возможность для аннотации параметров и результата функций (например, для передачи информации о типе или документирования).</li>
<li>Полный переход на <a href="/wiki/Unicode" class="mw-redirect" title="Unicode">unicode</a> для строк.</li>
<li>Введение нового типа «неизменяемые байты» и типа «изменяемый буфер». Оба необходимы для представления бинарных данных.</li>
<li>Новая подсистема ввода-вывода (модуль <code>io</code>), имеющая отдельные представления для бинарных и текстовых данных.</li>
<li><a href="/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BB%D0%B0%D1%81%D1%81" title="Абстрактный класс">Абстрактные классы</a>, <a href="/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4" title="Абстрактный метод">абстрактные методы</a> (доступно уже в 2.6).</li>
<li>Иерархия типов для чисел.</li>
<li>Выражения для словарей и множеств <code>{k: v for k, v in a_dict}</code> и <code>{el1, el2, el3}</code> (по аналогии со списковыми выражениями). Эта возможность была также добавлена в Python 2.7</li>
<li>Изменения <code>print</code> из встроенного выражения во встроенную функцию. Это позволит модулям делать изменения, подстраиваясь под разное использование функции, а также упростит код. В Python 2.7 эта возможность активируется вводом <code>from __future__ import print_function</code>.</li>
<li>Перемещение <code>reduce</code> (но не <code>map</code> или <code>filter</code>) из встроенного пространства в модуль <code>functools</code> (использование <code>reduce</code> существенно менее читабельно по сравнению с циклом).</li>
<li>Удаление некоторых устаревших возможностей, поддерживаемых в ветке 2.x для совместимости, в частности: классы старого стиля, целочисленное деление с обрезанием результата как поведение по умолчанию, строковые исключения, неявный относительный импорт, оператор <code>exec</code> и&#160;т. п.</li>
<li>Реорганизация стандартной библиотеки.</li>
<li>Новый синтаксис для метаклассов.</li>
<li>Изменён синтаксис присваиваний. Стало возможным, например, присваивание <code>a, *rest, b = range(5)</code>. С другой стороны, <a href="/wiki/%D0%9F%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Параметр (программирование)">формальные параметры</a> функций вроде <code>def foo(a, (b, c))</code> более недопустимы.</li></ul>
<h2><span id=".D0.A1.D0.BF.D0.B5.D1.86.D0.B8.D0.B0.D0.BB.D0.B8.D0.B7.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.BD.D1.8B.D0.B5_.D0.BF.D0.BE.D0.B4.D0.BC.D0.BD.D0.BE.D0.B6.D0.B5.D1.81.D1.82.D0.B2.D0.B0.2F.D1.80.D0.B0.D1.81.D1.88.D0.B8.D1.80.D0.B5.D0.BD.D0.B8.D1.8F_Python"></span><span class="mw-headline" id="Специализированные_подмножества/расширения_Python">Специализированные подмножества/расширения Python</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=42" class="mw-editsection-visualeditor" title="Редактировать раздел «Специализированные подмножества/расширения Python»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=42" title="Редактировать раздел «Специализированные подмножества/расширения Python»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>На основе Python было создано несколько специализированных подмножеств языка, в основном предназначенных для статической компиляции в машинный код. Некоторые из них перечислены ниже.
</p>
<ul><li><a href="/wiki/RPython" class="mw-redirect" title="RPython">RPython</a><sup id="cite_ref-101" class="reference"><a href="#cite_note-101">&#91;97&#93;</a></sup>&#160;— созданная в рамках проекта <a href="/wiki/PyPy" title="PyPy">PyPy</a> сильно ограниченная реализация Python без динамизма времени исполнения и некоторых других возможностей. Код на RPython можно компилировать во множество других языков/платформ&#160;— C, JavaScript, Lisp, .NET<sup id="cite_ref-102" class="reference"><a href="#cite_note-102">&#91;98&#93;</a></sup>, <a href="/wiki/LLVM" title="LLVM">LLVM</a>. На RPython написан интерпретатор PyPy.</li>
<li>Pyrex<sup id="cite_ref-pyrex_103-0" class="reference"><a href="#cite_note-pyrex-103">&#91;99&#93;</a></sup>&#160;— ограниченная реализация Python, но несколько меньше, чем RPython. Pyrex расширен возможностями статической типизации типами из языка С и позволяет свободно смешивать типизированный и не типизированный код. Предназначен для написания модулей расширений, компилируется в код на языке С.</li>
<li><a href="/wiki/Cython" title="Cython">Cython</a><sup id="cite_ref-104" class="reference"><a href="#cite_note-104">&#91;100&#93;</a></sup>&#160;— расширенная версия Pyrex.</li>
<li>Проект <a href="/wiki/Shedskin" title="Shedskin">Shedskin</a>&#160;— предназначен для компиляции неявно статически типизированного кода на Python в оптимизированный код на языке С++.</li></ul>
<div class="thumb tright"><div class="thumbinner" style="width:222px;"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Python%27s_IDLE.png" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Python%27s_IDLE.png/220px-Python%27s_IDLE.png" decoding="async" width="220" height="214" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Python%27s_IDLE.png/330px-Python%27s_IDLE.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Python%27s_IDLE.png/440px-Python%27s_IDLE.png 2x" data-file-width="1708" data-file-height="1664" /></a>  <div class="thumbcaption"><div class="magnify"><a href="/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Python%27s_IDLE.png" class="internal" title="Увеличить"></a></div><a href="/wiki/IDLE" title="IDLE">IDLE</a></div></div></div>
<h2><span id=".D0.98.D0.BD.D1.81.D1.82.D1.80.D1.83.D0.BC.D0.B5.D0.BD.D1.82.D1.8B_.D0.BF.D0.BE.D0.B4.D0.B4.D0.B5.D1.80.D0.B6.D0.BA.D0.B8_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.B8.D1.8F"></span><span class="mw-headline" id="Инструменты_поддержки_программирования">Инструменты поддержки программирования</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=43" class="mw-editsection-visualeditor" title="Редактировать раздел «Инструменты поддержки программирования»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=43" title="Редактировать раздел «Инструменты поддержки программирования»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span id=".D0.98.D0.BD.D1.82.D0.B5.D1.80.D0.B0.D0.BA.D1.82.D0.B8.D0.B2.D0.BD.D1.8B.D0.B9_.D1.80.D0.B5.D0.B6.D0.B8.D0.BC"></span><span class="mw-headline" id="Интерактивный_режим">Интерактивный режим</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=44" class="mw-editsection-visualeditor" title="Редактировать раздел «Интерактивный режим»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=44" title="Редактировать раздел «Интерактивный режим»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Подобно <a href="/wiki/%D0%9B%D0%B8%D1%81%D0%BF" title="Лисп">Лиспу</a> и <a href="/wiki/%D0%9F%D1%80%D0%BE%D0%BB%D0%BE%D0%B3_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Пролог (язык программирования)">Прологу</a>, Python может использоваться в интерактивном режиме, при котором введённые с клавиатуры операторы сразу же выполняются, а результат выводится на экран (<a href="/wiki/REPL" title="REPL">REPL</a>). Этот режим удобен как при изучении языка, так и в процессе профессиональной разработки&#160;— для быстрого тестирования отдельных фрагментов кода,&#160;— так как обеспечивает немедленную обратную связь. Также он позволяет использовать интерпретатор в качестве <a href="/wiki/%D0%9A%D0%B0%D0%BB%D1%8C%D0%BA%D1%83%D0%BB%D1%8F%D1%82%D0%BE%D1%80" title="Калькулятор">калькулятора</a> с большим набором функций.
</p>
<ul><li>Эталонная реализация Python имеет встроенный интерактивный интерпретатор, работающий в режиме текстового терминала и позволяющий выполнять все основные операции. В интерактивном режиме доступен <a href="/wiki/%D0%9E%D1%82%D0%BB%D0%B0%D0%B4%D1%87%D0%B8%D0%BA" title="Отладчик">отладчик</a> <code>pdb</code> и система помощи (вызывается по <code>help()</code>), работающая для всех модулей, классов и функций, которые содержат строки документации.</li></ul>
<dl><dd><div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">100</span> <span class="c1"># возведение 2 в степень 100</span>
<span class="mi">1267650600228229401496703205376</span><span class="n">L</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span> <span class="c1"># импорт математических функций</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">sin</span><span class="p">(</span><span class="n">pi</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">)</span> <span class="c1"># вычисление синуса от половины пи </span>
<span class="mf">1.0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">help</span><span class="p">(</span><span class="nb">sorted</span><span class="p">)</span> <span class="c1"># помощь по функции sorted</span>
<span class="n">Help</span> <span class="n">on</span> <span class="n">built</span><span class="o">-</span><span class="ow">in</span> <span class="n">function</span> <span class="nb">sorted</span> <span class="ow">in</span> <span class="n">module</span> <span class="n">__builtin__</span><span class="p">:</span>
<span class="nb">sorted</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
   <span class="nb">sorted</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="nb">cmp</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span> <span class="o">--&gt;</span> <span class="n">new</span> <span class="nb">sorted</span> <span class="nb">list</span>
</pre></div></dd></dl>
<ul><li><a href="/wiki/IPython" title="IPython">IPython</a><sup id="cite_ref-105" class="reference"><a href="#cite_note-105">&#91;101&#93;</a></sup>&#160;— выходящая под <a href="/wiki/%D0%9B%D0%B8%D1%86%D0%B5%D0%BD%D0%B7%D0%B8%D1%8F_BSD" title="Лицензия BSD">BSD-лицензией</a> кросс-платформенная интерактивная оболочка, предоставляющая расширенную интроспекцию и дополнительные команды. В частности, позволяет передавать исполняемому коду на Python результаты выполнения команд системной командной оболочки. Поддерживает подсветку кода и автоматическое дополнение.</li>
<li><a href="/w/index.php?title=Bpython&amp;action=edit&amp;redlink=1" class="new" title="Bpython (страница отсутствует)">bpython</a><sup id="cite_ref-106" class="reference"><a href="#cite_note-106">&#91;102&#93;</a></sup>&#160;— расширение стандартной командной оболочки Python с помощью ряда дополнительных модулей. Реализует подсветку синтаксиса, автоматическое дополнение кода с предложением вариантов, автоматическое выравнивание, интеграция с <a href="/wiki/Pastebin" title="Pastebin">Pastebin</a>, сохранение ввода в файл, восстановление удалённой строки, предложение параметров для функций.</li></ul>
<p>Почти все IDE для Python поддерживают <a href="/wiki/REPL" title="REPL">REPL</a> для быстрого тестирования.
</p>
<h3><span class="mw-headline" id="IDE">IDE</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=45" class="mw-editsection-visualeditor" title="Редактировать раздел «IDE»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=45" title="Редактировать раздел «IDE»">править код</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Существует несколько специализированных <a href="/wiki/%D0%98%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D1%80%D0%B5%D0%B4%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8" title="Интегрированная среда разработки">IDE</a> для разработки на Python.
</p>
<ul><li><a href="/wiki/Eric" title="Eric">Eric</a>&#160;— полнофункциональный редактор Python и IDE, написанный на Python. Он базируется на кросс-платформенном фреймворке <a href="/wiki/Qt" title="Qt">Qt</a>, в качестве компонента редактирования используется <a href="/wiki/Scintilla" title="Scintilla">QScintilla</a>. Eric предоставляет возможности ведения проектов, отладки, профилирования, рефакторинга кода, взаимодействия с популярными системами управления версиями, такими как <a href="/wiki/Subversion" title="Subversion">Subversion</a> и <a href="/wiki/Git" title="Git">Git</a>. Расширяется через механизм плагинов. Репозиторий плагинов доступен прямо из среды разработки. Распространяется бесплатно, <a href="/wiki/GNU_General_Public_License#GPL_v3" title="GNU General Public License">лицензия GNU GPL v3</a>.</li>
<li><a href="/wiki/PyCharm" title="PyCharm">PyCharm</a>&#160;— полнофункциональная IDE для Python от <a href="/wiki/JetBrains" title="JetBrains">JetBrains</a>, доступна на платформах Windows, Mac OS X и Linux, существует в бесплатном (Community) и платном (Professional) вариантах.</li>
<li><a href="https://en.wikipedia.org/wiki/Wing_IDE" class="extiw" title="en:Wing IDE">Wing IDE</a><span style="white-space: nowrap"><span class="noprint" style="font-size:95%; position: relative; top: .4em;">&#160;<span class="ref-info" style="cursor:help;" title="на английском языке">(англ.)</span></span><span class="link-ru metadata noprint" style="font-size:80%; margin-left:-1.7em; position: relative; top: -.4em;"><a href="/w/index.php?title=Wing_IDE&amp;action=edit&amp;redlink=1" class="new" title="Wing IDE (страница отсутствует)">русск.</a></span></span>&#160;— линейка Python-IDE от американской фирмы Wingware, включает три варианта: «Wing 101», «Wing Personal», «Wing Pro», из которых первые два бесплатны, последний&#160;— платный. Версия Pro обладает всеми необходимыми средствами для профессиональной разработки, включая поддержку проектов, работу с системами управления версиями, расширенные возможности навигации по коду и анализа кода, рефакторинг, поддержка использования <a href="/wiki/Django" title="Django">Django</a>. Бесплатные версии предоставляют меньше функций и не выходят за пределы возможностей, доступных в других бесплатных IDE для Python.</li>
<li><a href="/wiki/Spyder_(IDE)" title="Spyder (IDE)">Spyder</a>&#160;— open-source IDE для Python под <a href="/wiki/%D0%9B%D0%B8%D1%86%D0%B5%D0%BD%D0%B7%D0%B8%D1%8F_MIT" title="Лицензия MIT">лицензией MIT</a>, бесплатная, доступна на платформах Windows, Mac OS X и Linux. Особенностью является то, что IDE ориентирована на <a href="/wiki/Data_science" class="mw-redirect" title="Data science">data science</a>, в ней удобно работать с библиотеками типа SciPy, NumPy, Matplotlib. Spyder поставляется в комплекте с менеджером пакетов <a href="/wiki/Anaconda_(%D0%B8%D0%BD%D1%81%D1%82%D0%B0%D0%BB%D0%BB%D1%8F%D1%82%D0%BE%D1%80)" title="Anaconda (инсталлятор)">Anaconda</a>. В целом обладает качествами стандартной IDE, имеет редактор с подсветкой синтаксиса, автоматическое дополнение кода, обозреватель документации.</li>
<li><a href="/wiki/Thonny" title="Thonny">Thonny</a>&#160;— многоплатформенная бесплатная IDE, выпускается под <a href="/wiki/%D0%9B%D0%B8%D1%86%D0%B5%D0%BD%D0%B7%D0%B8%D1%8F_MIT" title="Лицензия MIT">лицензией MIT</a>, поддерживается Институтом информатики <a href="/wiki/%D0%A2%D0%B0%D1%80%D1%82%D1%83%D1%81%D0%BA%D0%B8%D0%B9_%D1%83%D0%BD%D0%B8%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%82%D0%B5%D1%82" title="Тартуский университет">Тартуского университета</a> в <a href="/wiki/%D0%AD%D1%81%D1%82%D0%BE%D0%BD%D0%B8%D1%8F" title="Эстония">Эстонии</a>. Позиционируется как «Python IDE для новичков», полностью, включая интерпретатор Python, ставится «из коробки» пользователем без административных прав, сразу после установки может использоваться без дополнительных настроек. Предназначена для обучения, имеет улучшенную визуализацию порядка вычисления выражений и вызова функций, динамическую подсветку синтаксических ошибок, простой менеджер пакетов. Для профессионального применения возможностей недостаточно, например, нет поддержки проектов и интеграции с <a href="/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8" title="Система управления версиями">системами управления версиями</a>.</li></ul>
<p>Помимо этого, существуют плагины для поддержки программирования на Python для универсальных IDE <a href="/wiki/Eclipse_(%D1%81%D1%80%D0%B5%D0%B4%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8)" title="Eclipse (среда разработки)">Eclipse</a>, <a href="/wiki/KDevelop" title="KDevelop">KDevelop</a> и <a href="/wiki/Microsoft_Visual_Studio" title="Microsoft Visual Studio">Microsoft Visual Studio</a>, а также имеется поддержка подсветки синтаксиса, автодополнения кода и подключения средств отладки и запуска приложений для целого ряда распространённых текстовых редакторов.
</p>
<h2><span id=".D0.9F.D1.80.D0.B8.D0.BC.D0.B5.D0.BD.D0.B5.D0.BD.D0.B8.D0.B5"></span><span class="mw-headline" id="Применение">Применение</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python&amp;veaction=edit&amp;section=46" class="mw-editsection-visualeditor" title="Редактировать раздел «Применение»">править</a><span class="mw-editsection-divider"> | </span><a href="/w/index.php?title=Python&amp;action=edit&amp;section=46" title="Редактировать раздел «Применение»">править код</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Python&#160;— стабильный и распространённый язык. Он используется во многих проектах и в различных качествах: как основной язык программирования или для создания расширений и интеграции приложений. На Python реализовано большое количество проектов, также он активно используется для создания прототипов будущих программ. Python используется во многих крупных компаниях<sup id="cite_ref-107" class="reference"><a href="#cite_note-107">&#91;103&#93;</a></sup>: <a href="/wiki/Dropbox" title="Dropbox">Dropbox</a>, <a href="/wiki/Google_(%D0%BA%D0%BE%D0%BC%D0%BF%D0%B0%D0%BD%D0%B8%D1%8F)" title="Google (компания)">Google</a> (например некоторые части Youtube и Youtube API написаны на Python<sup id="cite_ref-108" class="reference"><a href="#cite_note-108">&#91;104&#93;</a></sup>), <a href="/wiki/Facebook" title="Facebook">Facebook</a><sup id="cite_ref-109" class="reference"><a href="#cite_note-109">&#91;105&#93;</a></sup>, <a href="/wiki/Instagram" title="Instagram">Instagram</a><sup id="cite_ref-110" class="reference"><a href="#cite_note-110">&#91;106&#93;</a></sup>.
</p><p>Python с пакетами <a href="/wiki/NumPy" title="NumPy">NumPy</a>, <a href="/wiki/SciPy" title="SciPy">SciPy</a> и <a href="/wiki/Matplotlib" title="Matplotlib">MatPlotLib</a> активно используется как универсальная среда для научных расчётов в качестве замены распространённым специализированным коммерческим пакетам <a href="/wiki/Matlab" class="mw-redirect" title="Matlab">Matlab</a>, <a href="/wiki/IDL" class="mw-disambig" title="IDL">IDL</a> и другим. Библиотека <a href="/wiki/Astropy" title="Astropy">Astropy</a>&#160;— популярный инструмент для астрономических расчётов.
</p><p>Сочетание простоты и лаконичности с возможностью использования сложных абстракций и мощных разнообразных инструментов делает Python удобным в качестве <a href="/wiki/%D0%A1%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D1%8B%D0%B5_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8" class="mw-redirect" title="Скриптовые языки">скриптового языка</a>. Возможность его встраивания ограничивается объёмом интерпретатора, но в крупных системах это ограничение несущественно. В профессиональных программах трёхмерной графики, таких как <a href="/wiki/Autodesk_Maya" title="Autodesk Maya">Autodesk Maya</a>, <a href="/wiki/Blender" title="Blender">Blender</a>, <a href="/wiki/Houdini_(%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0)" title="Houdini (графическая программа)">Houdini</a> и <a href="/wiki/Nuke" title="Nuke">Nuke</a>, Python используется для расширения стандартных возможностей программ<sup id="cite_ref-111" class="reference"><a href="#cite_note-111">&#91;107&#93;</a></sup><sup id="cite_ref-112" class="reference"><a href="#cite_note-112">&#91;108&#93;</a></sup>. В <a href="/wiki/Microsoft" title="Microsoft">Microsoft</a> <a href="/wiki/Power_BI" title="Power BI">Power BI</a> Desktop Python, наряду со встроенными языками запросов и языком программирования <a href="/wiki/R_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="R (язык программирования)">R</a>, может использоваться на этапе загрузки данных в <a href="/wiki/ETL" title="ETL">ETL</a>-процессах, расчётах и графической визуализации данных<sup id="cite_ref-113" class="reference"><a href="#cite_note-113">&#91;109&#93;</a></sup><sup id="cite_ref-114" class="reference"><a href="#cite_note-114">&#91;110&#93;</a></sup>.
</p><p>Также Python подходит для выполнения нестандартных или сложных задач в <a href="/wiki/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_%D1%81%D0%B1%D0%BE%D1%80%D0%BA%D0%B8" title="Автоматизация сборки">системах сборки</a> проектов, что обусловлено отсутствием необходимости предварительной компиляции исходных файлов. В проекте <a href="/wiki/Google_C%2B%2B_Testing_Framework" title="Google C++ Testing Framework">Google Test</a> он используется для генерации исходного кода <a href="/wiki/Mock-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82" title="Mock-объект">mock-объектов</a> для классов языка <a href="/wiki/C%2B%2B" title="C++">C++</a><sup id="cite_ref-115" class="reference"><a href="#cite_note-115">&#91;111&#93;</a></sup>.
</p><p>Интерпретатор Python может использоваться в качестве мощной командной оболочки и скриптового языка для написания командных файлов ОС. Лёгкость обращения из Python-скриптов к внешним программам и наличие библиотек, дающих доступ к управлению системой, делают Python удобным инструментом для системного администрирования.<sup id="cite_ref-GiftJones_116-0" class="reference"><a href="#cite_note-GiftJones-116">&#91;112&#93;</a></sup> Он широко используется для этой цели на платформе Linux: обычно Python поставляется с системой, во многих дистрибутивах инсталляторы и визуальный интерфейс системных утилит написаны именно на Python. Используется он и в администрировании других Unix-систем, в частности, в <a href="/wiki/Solaris" title="Solaris">Solaris</a> и <a href="/wiki/MacOS" title="MacOS">macOS</a>.<sup id="cite_ref-GiftJones_116-1" class="reference"><a href="#cite_note-GiftJones-116">&#91;112&#93;</a></sup> Кросс-платформенность самого языка и библиотек делает его привлекательным для унифицированной автоматизации задач системного администрирования в гетерогенных средах, где совместно применяются компьютеры с операционными системами различных типов.
</p>
              
                <!-- *************************************************************** -->
            </div>
            
            </div>
                
            <!-- ============================================================== -->
            <!-- End Container fluid  -->
            <!-- ============================================================== -->
            <!-- ============================================================== -->
            <!-- footer -->
            <!-- ============================================================== -->
            <footer class="footer text-center text-muted">
            <small class="copyright">Амирджон Раджабов <i class="fa fa-heart"></i> 2020 <a href="#">OSCODE.RU</a> © Все права защищены</small>
            </footer>
            <!-- ============================================================== -->
            <!-- End footer -->
            <!-- ============================================================== -->
        </div>
        <!-- ============================================================== -->
        <!-- End Page wrapper  -->
        <!-- ============================================================== -->
    </div>
    <!-- ============================================================== -->
    <!-- End Wrapper -->
    <!-- ============================================================== -->
    <!-- End Wrapper -->
    <!-- ============================================================== -->
    <!-- All Jquery -->
    <!-- ============================================================== -->
    <script src="../../assets/libs/jquery/dist/jquery.min.js"></script>
    <script src="../../assets/libs/popper.js/dist/umd/popper.min.js"></script>
    <script src="../../assets/libs/bootstrap/dist/js/bootstrap.min.js"></script>
    <!-- apps -->
    <!-- apps -->
    <script src="../../dist/js/app-style-switcher.js"></script>
    <script src="../../dist/js/feather.min.js"></script>
    <script src="../../assets/libs/perfect-scrollbar/dist/perfect-scrollbar.jquery.min.js"></script>
    <script src="../../dist/js/sidebarmenu.js"></script>
    <!--Custom JavaScript -->
    <script src="../../dist/js/custom.min.js"></script>
    <!--This page JavaScript -->
    <script src="../../assets/extra-libs/c3/d3.min.js"></script>
    <script src="../../assets/extra-libs/c3/c3.min.js"></script>
    <script src="../../assets/libs/chartist/dist/chartist.min.js"></script>
    <script src="../../assets/libs/chartist-plugin-tooltips/dist/chartist-plugin-tooltip.min.js"></script>
    <script src="../../assets/extra-libs/jvector/jquery-jvectormap-2.0.2.min.js"></script>
    <script src="../../assets/extra-libs/jvector/jquery-jvectormap-world-mill-en.js"></script>
    <script src="../../dist/js/pages/dashboards/dashboard1.min.js"></script>
</body>

</html>